# Generated from Grammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,46,865,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,0,4,0,106,
        8,0,11,0,12,0,107,1,0,1,0,1,1,1,1,1,1,3,1,115,8,1,1,1,5,1,118,8,
        1,10,1,12,1,121,9,1,1,1,1,1,5,1,125,8,1,10,1,12,1,128,9,1,1,1,1,
        1,1,1,3,1,133,8,1,1,2,1,2,1,2,3,2,138,8,2,1,2,5,2,141,8,2,10,2,12,
        2,144,9,2,1,2,1,2,5,2,148,8,2,10,2,12,2,151,9,2,1,2,1,2,1,2,3,2,
        156,8,2,1,3,1,3,3,3,160,8,3,1,3,5,3,163,8,3,10,3,12,3,166,9,3,1,
        3,1,3,5,3,170,8,3,10,3,12,3,173,9,3,1,3,1,3,3,3,177,8,3,1,4,1,4,
        3,4,181,8,4,1,4,5,4,184,8,4,10,4,12,4,187,9,4,1,4,1,4,5,4,191,8,
        4,10,4,12,4,194,9,4,1,4,1,4,3,4,198,8,4,1,5,1,5,3,5,202,8,5,1,5,
        5,5,205,8,5,10,5,12,5,208,9,5,1,5,1,5,5,5,212,8,5,10,5,12,5,215,
        9,5,1,5,1,5,3,5,219,8,5,1,6,1,6,3,6,223,8,6,1,6,5,6,226,8,6,10,6,
        12,6,229,9,6,1,6,1,6,5,6,233,8,6,10,6,12,6,236,9,6,1,6,1,6,3,6,240,
        8,6,1,7,1,7,3,7,244,8,7,1,7,5,7,247,8,7,10,7,12,7,250,9,7,1,7,1,
        7,5,7,254,8,7,10,7,12,7,257,9,7,1,7,1,7,3,7,261,8,7,1,7,1,7,3,7,
        265,8,7,1,7,5,7,268,8,7,10,7,12,7,271,9,7,1,7,1,7,5,7,275,8,7,10,
        7,12,7,278,9,7,1,7,1,7,3,7,282,8,7,3,7,284,8,7,1,8,1,8,3,8,288,8,
        8,1,8,5,8,291,8,8,10,8,12,8,294,9,8,1,8,1,8,5,8,298,8,8,10,8,12,
        8,301,9,8,1,8,1,8,3,8,305,8,8,1,9,1,9,3,9,309,8,9,1,9,5,9,312,8,
        9,10,9,12,9,315,9,9,1,9,1,9,5,9,319,8,9,10,9,12,9,322,9,9,1,9,1,
        9,3,9,326,8,9,1,10,1,10,3,10,330,8,10,1,10,5,10,333,8,10,10,10,12,
        10,336,9,10,1,10,1,10,5,10,340,8,10,10,10,12,10,343,9,10,1,10,1,
        10,3,10,347,8,10,1,10,1,10,3,10,351,8,10,1,10,5,10,354,8,10,10,10,
        12,10,357,9,10,1,10,1,10,5,10,361,8,10,10,10,12,10,364,9,10,1,10,
        1,10,3,10,368,8,10,3,10,370,8,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,403,
        8,16,10,16,12,16,406,9,16,1,16,5,16,409,8,16,10,16,12,16,412,9,16,
        1,16,1,16,1,17,1,17,1,17,1,17,5,17,420,8,17,10,17,12,17,423,9,17,
        1,17,5,17,426,8,17,10,17,12,17,429,9,17,1,17,1,17,1,18,1,18,3,18,
        435,8,18,1,19,1,19,1,19,1,19,3,19,441,8,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,22,3,22,450,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,3,23,460,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,468,8,24,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,5,35,520,8,35,
        10,35,12,35,523,9,35,1,35,1,35,5,35,527,8,35,10,35,12,35,530,9,35,
        1,35,5,35,533,8,35,10,35,12,35,536,9,35,1,35,3,35,539,8,35,1,36,
        1,36,1,36,1,36,1,36,3,36,546,8,36,1,37,1,37,1,38,1,38,1,38,1,38,
        3,38,554,8,38,1,39,5,39,557,8,39,10,39,12,39,560,9,39,1,39,1,39,
        1,39,1,39,1,39,1,39,3,39,568,8,39,1,39,1,39,1,40,1,40,5,40,574,8,
        40,10,40,12,40,577,9,40,1,40,1,40,5,40,581,8,40,10,40,12,40,584,
        9,40,1,40,1,40,1,41,1,41,5,41,590,8,41,10,41,12,41,593,9,41,1,41,
        1,41,5,41,597,8,41,10,41,12,41,600,9,41,1,41,1,41,5,41,604,8,41,
        10,41,12,41,607,9,41,1,41,1,41,5,41,611,8,41,10,41,12,41,614,9,41,
        1,41,1,41,5,41,618,8,41,10,41,12,41,621,9,41,1,41,1,41,5,41,625,
        8,41,10,41,12,41,628,9,41,1,41,1,41,1,42,1,42,5,42,634,8,42,10,42,
        12,42,637,9,42,1,42,1,42,1,42,5,42,642,8,42,10,42,12,42,645,9,42,
        1,42,1,42,5,42,649,8,42,10,42,12,42,652,9,42,1,42,5,42,655,8,42,
        10,42,12,42,658,9,42,1,42,1,42,5,42,662,8,42,10,42,12,42,665,9,42,
        1,42,1,42,1,42,1,42,5,42,671,8,42,10,42,12,42,674,9,42,1,42,1,42,
        1,42,5,42,679,8,42,10,42,12,42,682,9,42,1,42,1,42,5,42,686,8,42,
        10,42,12,42,689,9,42,1,42,5,42,692,8,42,10,42,12,42,695,9,42,1,42,
        1,42,5,42,699,8,42,10,42,12,42,702,9,42,1,42,1,42,5,42,706,8,42,
        10,42,12,42,709,9,42,1,42,5,42,712,8,42,10,42,12,42,715,9,42,1,42,
        1,42,3,42,719,8,42,1,43,1,43,5,43,723,8,43,10,43,12,43,726,9,43,
        1,43,5,43,729,8,43,10,43,12,43,732,9,43,1,43,1,43,5,43,736,8,43,
        10,43,12,43,739,9,43,1,43,1,43,1,44,1,44,5,44,745,8,44,10,44,12,
        44,748,9,44,1,44,1,44,5,44,752,8,44,10,44,12,44,755,9,44,1,44,1,
        44,5,44,759,8,44,10,44,12,44,762,9,44,1,44,1,44,5,44,766,8,44,10,
        44,12,44,769,9,44,1,44,1,44,5,44,773,8,44,10,44,12,44,776,9,44,1,
        44,1,44,5,44,780,8,44,10,44,12,44,783,9,44,1,44,1,44,5,44,787,8,
        44,10,44,12,44,790,9,44,1,44,1,44,5,44,794,8,44,10,44,12,44,797,
        9,44,1,44,5,44,800,8,44,10,44,12,44,803,9,44,1,44,1,44,5,44,807,
        8,44,10,44,12,44,810,9,44,1,44,5,44,813,8,44,10,44,12,44,816,9,44,
        1,44,1,44,1,45,1,45,5,45,822,8,45,10,45,12,45,825,9,45,1,45,1,45,
        5,45,829,8,45,10,45,12,45,832,9,45,1,45,1,45,1,46,1,46,5,46,838,
        8,46,10,46,12,46,841,9,46,1,46,1,46,5,46,845,8,46,10,46,12,46,848,
        9,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,3,48,857,8,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,51,0,0,52,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,0,1,1,0,7,12,
        943,0,105,1,0,0,0,2,114,1,0,0,0,4,137,1,0,0,0,6,159,1,0,0,0,8,180,
        1,0,0,0,10,201,1,0,0,0,12,222,1,0,0,0,14,283,1,0,0,0,16,287,1,0,
        0,0,18,308,1,0,0,0,20,369,1,0,0,0,22,371,1,0,0,0,24,376,1,0,0,0,
        26,381,1,0,0,0,28,386,1,0,0,0,30,393,1,0,0,0,32,398,1,0,0,0,34,415,
        1,0,0,0,36,434,1,0,0,0,38,440,1,0,0,0,40,442,1,0,0,0,42,444,1,0,
        0,0,44,449,1,0,0,0,46,459,1,0,0,0,48,467,1,0,0,0,50,469,1,0,0,0,
        52,474,1,0,0,0,54,479,1,0,0,0,56,484,1,0,0,0,58,489,1,0,0,0,60,494,
        1,0,0,0,62,499,1,0,0,0,64,504,1,0,0,0,66,509,1,0,0,0,68,514,1,0,
        0,0,70,538,1,0,0,0,72,545,1,0,0,0,74,547,1,0,0,0,76,553,1,0,0,0,
        78,558,1,0,0,0,80,571,1,0,0,0,82,587,1,0,0,0,84,718,1,0,0,0,86,720,
        1,0,0,0,88,742,1,0,0,0,90,819,1,0,0,0,92,835,1,0,0,0,94,851,1,0,
        0,0,96,856,1,0,0,0,98,858,1,0,0,0,100,860,1,0,0,0,102,862,1,0,0,
        0,104,106,3,76,38,0,105,104,1,0,0,0,106,107,1,0,0,0,107,105,1,0,
        0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,0,0,1,110,1,1,0,0,
        0,111,115,5,44,0,0,112,115,3,98,49,0,113,115,3,6,3,0,114,111,1,0,
        0,0,114,112,1,0,0,0,114,113,1,0,0,0,115,119,1,0,0,0,116,118,5,45,
        0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,
        0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,126,5,1,0,0,123,125,5,45,
        0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,
        0,0,127,132,1,0,0,0,128,126,1,0,0,0,129,133,5,44,0,0,130,133,3,98,
        49,0,131,133,3,6,3,0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,
        0,0,133,3,1,0,0,0,134,138,5,44,0,0,135,138,3,98,49,0,136,138,3,6,
        3,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,142,1,0,
        0,0,139,141,5,45,0,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,
        0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,142,1,0,0,0,145,149,5,2,
        0,0,146,148,5,45,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,
        0,0,149,150,1,0,0,0,150,155,1,0,0,0,151,149,1,0,0,0,152,156,5,44,
        0,0,153,156,3,98,49,0,154,156,3,6,3,0,155,152,1,0,0,0,155,153,1,
        0,0,0,155,154,1,0,0,0,156,5,1,0,0,0,157,160,5,44,0,0,158,160,3,98,
        49,0,159,157,1,0,0,0,159,158,1,0,0,0,160,164,1,0,0,0,161,163,5,45,
        0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,
        0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,171,5,3,0,0,168,170,5,45,
        0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,
        0,0,172,176,1,0,0,0,173,171,1,0,0,0,174,177,5,44,0,0,175,177,3,98,
        49,0,176,174,1,0,0,0,176,175,1,0,0,0,177,7,1,0,0,0,178,181,5,44,
        0,0,179,181,3,96,48,0,180,178,1,0,0,0,180,179,1,0,0,0,181,185,1,
        0,0,0,182,184,5,45,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,
        0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,192,5,
        5,0,0,189,191,5,45,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,
        0,0,0,192,193,1,0,0,0,193,197,1,0,0,0,194,192,1,0,0,0,195,198,5,
        44,0,0,196,198,3,96,48,0,197,195,1,0,0,0,197,196,1,0,0,0,198,9,1,
        0,0,0,199,202,3,34,17,0,200,202,3,102,51,0,201,199,1,0,0,0,201,200,
        1,0,0,0,202,206,1,0,0,0,203,205,5,45,0,0,204,203,1,0,0,0,205,208,
        1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,
        1,0,0,0,209,213,5,3,0,0,210,212,5,45,0,0,211,210,1,0,0,0,212,215,
        1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,218,1,0,0,0,215,213,
        1,0,0,0,216,219,3,34,17,0,217,219,3,102,51,0,218,216,1,0,0,0,218,
        217,1,0,0,0,219,11,1,0,0,0,220,223,3,34,17,0,221,223,3,102,51,0,
        222,220,1,0,0,0,222,221,1,0,0,0,223,227,1,0,0,0,224,226,5,45,0,0,
        225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,
        228,230,1,0,0,0,229,227,1,0,0,0,230,234,5,1,0,0,231,233,5,45,0,0,
        232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,
        235,239,1,0,0,0,236,234,1,0,0,0,237,240,3,34,17,0,238,240,3,102,
        51,0,239,237,1,0,0,0,239,238,1,0,0,0,240,13,1,0,0,0,241,244,3,34,
        17,0,242,244,3,102,51,0,243,241,1,0,0,0,243,242,1,0,0,0,244,248,
        1,0,0,0,245,247,5,45,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,
        1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,0,0,0,251,255,
        5,3,0,0,252,254,5,45,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,
        1,0,0,0,255,256,1,0,0,0,256,260,1,0,0,0,257,255,1,0,0,0,258,261,
        5,44,0,0,259,261,3,98,49,0,260,258,1,0,0,0,260,259,1,0,0,0,261,284,
        1,0,0,0,262,265,5,44,0,0,263,265,3,98,49,0,264,262,1,0,0,0,264,263,
        1,0,0,0,265,269,1,0,0,0,266,268,5,45,0,0,267,266,1,0,0,0,268,271,
        1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,
        1,0,0,0,272,276,5,3,0,0,273,275,5,45,0,0,274,273,1,0,0,0,275,278,
        1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,281,1,0,0,0,278,276,
        1,0,0,0,279,282,3,34,17,0,280,282,3,102,51,0,281,279,1,0,0,0,281,
        280,1,0,0,0,282,284,1,0,0,0,283,243,1,0,0,0,283,264,1,0,0,0,284,
        15,1,0,0,0,285,288,3,32,16,0,286,288,3,100,50,0,287,285,1,0,0,0,
        287,286,1,0,0,0,288,292,1,0,0,0,289,291,5,45,0,0,290,289,1,0,0,0,
        291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,
        294,292,1,0,0,0,295,299,5,3,0,0,296,298,5,45,0,0,297,296,1,0,0,0,
        298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,304,1,0,0,0,
        301,299,1,0,0,0,302,305,3,32,16,0,303,305,3,100,50,0,304,302,1,0,
        0,0,304,303,1,0,0,0,305,17,1,0,0,0,306,309,3,32,16,0,307,309,3,100,
        50,0,308,306,1,0,0,0,308,307,1,0,0,0,309,313,1,0,0,0,310,312,5,45,
        0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,
        0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,320,5,1,0,0,317,319,5,45,
        0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
        0,0,321,325,1,0,0,0,322,320,1,0,0,0,323,326,3,32,16,0,324,326,3,
        100,50,0,325,323,1,0,0,0,325,324,1,0,0,0,326,19,1,0,0,0,327,330,
        3,32,16,0,328,330,3,100,50,0,329,327,1,0,0,0,329,328,1,0,0,0,330,
        334,1,0,0,0,331,333,5,45,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,
        332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,
        341,5,3,0,0,338,340,5,45,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
        339,1,0,0,0,341,342,1,0,0,0,342,346,1,0,0,0,343,341,1,0,0,0,344,
        347,5,44,0,0,345,347,3,98,49,0,346,344,1,0,0,0,346,345,1,0,0,0,347,
        370,1,0,0,0,348,351,5,44,0,0,349,351,3,98,49,0,350,348,1,0,0,0,350,
        349,1,0,0,0,351,355,1,0,0,0,352,354,5,45,0,0,353,352,1,0,0,0,354,
        357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,
        355,1,0,0,0,358,362,5,3,0,0,359,361,5,45,0,0,360,359,1,0,0,0,361,
        364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,367,1,0,0,0,364,
        362,1,0,0,0,365,368,3,32,16,0,366,368,3,100,50,0,367,365,1,0,0,0,
        367,366,1,0,0,0,368,370,1,0,0,0,369,329,1,0,0,0,369,350,1,0,0,0,
        370,21,1,0,0,0,371,372,5,20,0,0,372,373,5,30,0,0,373,374,3,48,24,
        0,374,375,5,31,0,0,375,23,1,0,0,0,376,377,5,21,0,0,377,378,5,30,
        0,0,378,379,3,48,24,0,379,380,5,31,0,0,380,25,1,0,0,0,381,382,5,
        23,0,0,382,383,5,30,0,0,383,384,3,48,24,0,384,385,5,31,0,0,385,27,
        1,0,0,0,386,387,5,24,0,0,387,388,5,30,0,0,388,389,3,48,24,0,389,
        390,5,15,0,0,390,391,5,44,0,0,391,392,5,31,0,0,392,29,1,0,0,0,393,
        394,5,22,0,0,394,395,5,30,0,0,395,396,3,48,24,0,396,397,5,31,0,0,
        397,31,1,0,0,0,398,399,5,34,0,0,399,410,5,44,0,0,400,404,5,15,0,
        0,401,403,5,45,0,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,
        0,404,405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,409,5,44,0,
        0,408,400,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,
        0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,5,35,0,0,414,33,1,0,0,
        0,415,416,5,34,0,0,416,427,3,32,16,0,417,421,5,15,0,0,418,420,5,
        45,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,
        0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,426,3,32,16,0,425,417,
        1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,427,1,0,0,0,430,431,5,35,0,0,431,35,1,0,0,0,432,435,
        3,22,11,0,433,435,3,24,12,0,434,432,1,0,0,0,434,433,1,0,0,0,435,
        37,1,0,0,0,436,441,3,2,1,0,437,441,3,4,2,0,438,441,3,6,3,0,439,441,
        3,8,4,0,440,436,1,0,0,0,440,437,1,0,0,0,440,438,1,0,0,0,440,439,
        1,0,0,0,441,39,1,0,0,0,442,443,3,16,8,0,443,41,1,0,0,0,444,445,3,
        10,5,0,445,43,1,0,0,0,446,450,3,10,5,0,447,450,3,16,8,0,448,450,
        3,38,19,0,449,446,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,45,
        1,0,0,0,451,460,3,36,18,0,452,460,3,26,13,0,453,460,3,28,14,0,454,
        460,3,30,15,0,455,460,3,50,25,0,456,460,3,52,26,0,457,460,3,54,27,
        0,458,460,3,56,28,0,459,451,1,0,0,0,459,452,1,0,0,0,459,453,1,0,
        0,0,459,454,1,0,0,0,459,455,1,0,0,0,459,456,1,0,0,0,459,457,1,0,
        0,0,459,458,1,0,0,0,460,47,1,0,0,0,461,468,3,46,23,0,462,468,3,44,
        22,0,463,468,3,34,17,0,464,468,3,32,16,0,465,468,3,96,48,0,466,468,
        5,44,0,0,467,461,1,0,0,0,467,462,1,0,0,0,467,463,1,0,0,0,467,464,
        1,0,0,0,467,465,1,0,0,0,467,466,1,0,0,0,468,49,1,0,0,0,469,470,5,
        16,0,0,470,471,5,30,0,0,471,472,3,48,24,0,472,473,5,31,0,0,473,51,
        1,0,0,0,474,475,5,17,0,0,475,476,5,30,0,0,476,477,3,48,24,0,477,
        478,5,31,0,0,478,53,1,0,0,0,479,480,5,18,0,0,480,481,5,30,0,0,481,
        482,3,48,24,0,482,483,5,31,0,0,483,55,1,0,0,0,484,485,5,19,0,0,485,
        486,5,30,0,0,486,487,3,48,24,0,487,488,5,31,0,0,488,57,1,0,0,0,489,
        490,5,27,0,0,490,491,5,30,0,0,491,492,3,48,24,0,492,493,5,31,0,0,
        493,59,1,0,0,0,494,495,5,28,0,0,495,496,5,30,0,0,496,497,3,48,24,
        0,497,498,5,31,0,0,498,61,1,0,0,0,499,500,5,29,0,0,500,501,5,30,
        0,0,501,502,3,48,24,0,502,503,5,31,0,0,503,63,1,0,0,0,504,505,5,
        25,0,0,505,506,5,30,0,0,506,507,3,48,24,0,507,508,5,31,0,0,508,65,
        1,0,0,0,509,510,5,26,0,0,510,511,5,30,0,0,511,512,3,48,24,0,512,
        513,5,31,0,0,513,67,1,0,0,0,514,515,3,48,24,0,515,516,5,14,0,0,516,
        69,1,0,0,0,517,521,3,72,36,0,518,520,5,45,0,0,519,518,1,0,0,0,520,
        523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,534,1,0,0,0,523,
        521,1,0,0,0,524,528,5,15,0,0,525,527,5,45,0,0,526,525,1,0,0,0,527,
        530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,
        528,1,0,0,0,531,533,3,72,36,0,532,524,1,0,0,0,533,536,1,0,0,0,534,
        532,1,0,0,0,534,535,1,0,0,0,535,539,1,0,0,0,536,534,1,0,0,0,537,
        539,3,74,37,0,538,517,1,0,0,0,538,537,1,0,0,0,539,71,1,0,0,0,540,
        546,3,96,48,0,541,542,3,96,48,0,542,543,5,13,0,0,543,544,3,48,24,
        0,544,546,1,0,0,0,545,540,1,0,0,0,545,541,1,0,0,0,546,73,1,0,0,0,
        547,548,1,0,0,0,548,75,1,0,0,0,549,554,3,78,39,0,550,551,3,78,39,
        0,551,552,3,76,38,0,552,554,1,0,0,0,553,549,1,0,0,0,553,550,1,0,
        0,0,554,77,1,0,0,0,555,557,5,45,0,0,556,555,1,0,0,0,557,560,1,0,
        0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,567,1,0,0,0,560,558,1,0,
        0,0,561,568,3,80,40,0,562,568,3,48,24,0,563,568,3,84,42,0,564,568,
        3,88,44,0,565,568,3,90,45,0,566,568,3,82,41,0,567,561,1,0,0,0,567,
        562,1,0,0,0,567,563,1,0,0,0,567,564,1,0,0,0,567,565,1,0,0,0,567,
        566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,570,5,46,0,0,570,
        79,1,0,0,0,571,575,3,96,48,0,572,574,5,45,0,0,573,572,1,0,0,0,574,
        577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,
        575,1,0,0,0,578,582,5,13,0,0,579,581,5,45,0,0,580,579,1,0,0,0,581,
        584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,
        582,1,0,0,0,585,586,3,48,24,0,586,81,1,0,0,0,587,591,5,39,0,0,588,
        590,5,45,0,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
        592,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,598,5,30,0,0,595,
        597,5,45,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,
        599,1,0,0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,605,3,70,35,0,602,
        604,5,45,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,
        606,1,0,0,0,606,608,1,0,0,0,607,605,1,0,0,0,608,612,5,31,0,0,609,
        611,5,45,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,
        613,1,0,0,0,613,615,1,0,0,0,614,612,1,0,0,0,615,619,5,32,0,0,616,
        618,5,45,0,0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,
        620,1,0,0,0,620,622,1,0,0,0,621,619,1,0,0,0,622,626,3,76,38,0,623,
        625,5,45,0,0,624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,
        627,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,0,629,630,5,33,0,0,630,
        83,1,0,0,0,631,635,5,40,0,0,632,634,5,45,0,0,633,632,1,0,0,0,634,
        637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,
        635,1,0,0,0,638,639,3,92,46,0,639,643,5,31,0,0,640,642,5,45,0,0,
        641,640,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,
        644,646,1,0,0,0,645,643,1,0,0,0,646,650,5,32,0,0,647,649,5,45,0,
        0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,
        0,651,656,1,0,0,0,652,650,1,0,0,0,653,655,5,46,0,0,654,653,1,0,0,
        0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,
        0,658,656,1,0,0,0,659,663,3,76,38,0,660,662,5,46,0,0,661,660,1,0,
        0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,
        0,0,665,663,1,0,0,0,666,667,5,33,0,0,667,719,1,0,0,0,668,672,5,40,
        0,0,669,671,5,45,0,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,
        0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,672,1,0,0,0,675,676,3,92,
        46,0,676,680,5,31,0,0,677,679,5,45,0,0,678,677,1,0,0,0,679,682,1,
        0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,680,1,
        0,0,0,683,687,5,32,0,0,684,686,5,45,0,0,685,684,1,0,0,0,686,689,
        1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,693,1,0,0,0,689,687,
        1,0,0,0,690,692,5,46,0,0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,
        1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,700,
        3,76,38,0,697,699,5,45,0,0,698,697,1,0,0,0,699,702,1,0,0,0,700,698,
        1,0,0,0,700,701,1,0,0,0,701,703,1,0,0,0,702,700,1,0,0,0,703,707,
        5,33,0,0,704,706,5,45,0,0,705,704,1,0,0,0,706,709,1,0,0,0,707,705,
        1,0,0,0,707,708,1,0,0,0,708,713,1,0,0,0,709,707,1,0,0,0,710,712,
        5,46,0,0,711,710,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,
        1,0,0,0,714,716,1,0,0,0,715,713,1,0,0,0,716,717,3,86,43,0,717,719,
        1,0,0,0,718,631,1,0,0,0,718,668,1,0,0,0,719,85,1,0,0,0,720,724,5,
        41,0,0,721,723,5,45,0,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,
        1,0,0,0,724,725,1,0,0,0,725,730,1,0,0,0,726,724,1,0,0,0,727,729,
        5,46,0,0,728,727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,
        1,0,0,0,731,733,1,0,0,0,732,730,1,0,0,0,733,737,3,76,38,0,734,736,
        5,46,0,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,
        1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,5,33,0,0,741,87,
        1,0,0,0,742,746,5,43,0,0,743,745,5,45,0,0,744,743,1,0,0,0,745,748,
        1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,
        1,0,0,0,749,753,3,80,40,0,750,752,5,45,0,0,751,750,1,0,0,0,752,755,
        1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,753,
        1,0,0,0,756,760,5,36,0,0,757,759,5,45,0,0,758,757,1,0,0,0,759,762,
        1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,
        1,0,0,0,763,767,3,92,46,0,764,766,5,45,0,0,765,764,1,0,0,0,766,769,
        1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,
        1,0,0,0,770,774,5,36,0,0,771,773,5,45,0,0,772,771,1,0,0,0,773,776,
        1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,774,
        1,0,0,0,777,781,3,80,40,0,778,780,5,45,0,0,779,778,1,0,0,0,780,783,
        1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,781,
        1,0,0,0,784,788,5,31,0,0,785,787,5,45,0,0,786,785,1,0,0,0,787,790,
        1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,788,
        1,0,0,0,791,795,5,32,0,0,792,794,5,46,0,0,793,792,1,0,0,0,794,797,
        1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,801,1,0,0,0,797,795,
        1,0,0,0,798,800,5,45,0,0,799,798,1,0,0,0,800,803,1,0,0,0,801,799,
        1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,808,
        3,76,38,0,805,807,5,45,0,0,806,805,1,0,0,0,807,810,1,0,0,0,808,806,
        1,0,0,0,808,809,1,0,0,0,809,814,1,0,0,0,810,808,1,0,0,0,811,813,
        5,46,0,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,
        1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,5,33,0,0,818,89,
        1,0,0,0,819,823,5,42,0,0,820,822,5,45,0,0,821,820,1,0,0,0,822,825,
        1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,823,
        1,0,0,0,826,830,3,48,24,0,827,829,5,45,0,0,828,827,1,0,0,0,829,832,
        1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,833,1,0,0,0,832,830,
        1,0,0,0,833,834,5,31,0,0,834,91,1,0,0,0,835,839,3,48,24,0,836,838,
        5,45,0,0,837,836,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,
        1,0,0,0,840,842,1,0,0,0,841,839,1,0,0,0,842,846,3,94,47,0,843,845,
        5,45,0,0,844,843,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,
        1,0,0,0,847,849,1,0,0,0,848,846,1,0,0,0,849,850,3,48,24,0,850,93,
        1,0,0,0,851,852,7,0,0,0,852,95,1,0,0,0,853,857,3,98,49,0,854,857,
        3,100,50,0,855,857,3,102,51,0,856,853,1,0,0,0,856,854,1,0,0,0,856,
        855,1,0,0,0,857,97,1,0,0,0,858,859,5,37,0,0,859,99,1,0,0,0,860,861,
        5,37,0,0,861,101,1,0,0,0,862,863,5,38,0,0,863,103,1,0,0,0,108,107,
        114,119,126,132,137,142,149,155,159,164,171,176,180,185,192,197,
        201,206,213,218,222,227,234,239,243,248,255,260,264,269,276,281,
        283,287,292,299,304,308,313,320,325,329,334,341,346,350,355,362,
        367,369,404,410,421,427,434,440,449,459,467,521,528,534,538,545,
        553,558,567,575,582,591,598,605,612,619,626,635,643,650,656,663,
        672,680,687,693,700,707,713,718,724,730,737,746,753,760,767,774,
        781,788,795,801,808,814,823,830,839,846,856
    ]

class GrammarParser ( Parser ):

    grammarFileName = "Grammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                     "'='", "'<>'", "'<'", "'>'", "'<='", "'>='", "':='", 
                     "'!'", "','", "'exp'", "'abs'", "'ceil'", "'floor'", 
                     "'sin'", "'cos'", "'log'", "'sqrt'", "'root'", "'sinh'", 
                     "'cosh'", "'arcsin'", "'arccos'", "'arctan'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "<INVALID>", 
                     "<INVALID>", "'func'", "'if ('", "'else {'", "'print('", 
                     "'for ('", "<INVALID>", "' '", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
                      "MOD", "POWER", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
                      "GREATER_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", 
                      "ASSIGNMENT", "FACTORIAL", "COMMA", "EXP", "ABS", 
                      "CEIL", "FLOOR", "SIN", "COS", "LOG", "SQRT", "ROOT", 
                      "SINH", "COSH", "ARCSIN", "ARCCOS", "ARCTAN", "PAR_LEFT", 
                      "PAR_RIGHT", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", 
                      "BRACKET_RIGHT", "SEMICOLON", "VEC_ID", "MAT_ID", 
                      "FUNC", "IF", "ELSE", "PRINT", "FOR", "NUMBER", "SPACE", 
                      "NEWLINE" ]

    RULE_program = 0
    RULE_addition = 1
    RULE_subtraction = 2
    RULE_multiplication = 3
    RULE_modulo_op = 4
    RULE_matmul = 5
    RULE_mat_add = 6
    RULE_mat_scalar_mult = 7
    RULE_dot_product = 8
    RULE_vec_add = 9
    RULE_vec_scalar_mult = 10
    RULE_sin = 11
    RULE_cos = 12
    RULE_sqrt = 13
    RULE_root = 14
    RULE_log = 15
    RULE_vector = 16
    RULE_matrix = 17
    RULE_trig_func = 18
    RULE_scalar_op = 19
    RULE_vector_op = 20
    RULE_matrix_op = 21
    RULE_operation = 22
    RULE_built_in_func = 23
    RULE_expression = 24
    RULE_exp_func = 25
    RULE_abs_func = 26
    RULE_ceil_func = 27
    RULE_floor_func = 28
    RULE_arcsin_func = 29
    RULE_arccos_func = 30
    RULE_arctan_func = 31
    RULE_sinh_func = 32
    RULE_cosh_func = 33
    RULE_factorial_func = 34
    RULE_params = 35
    RULE_param = 36
    RULE_empty = 37
    RULE_statements = 38
    RULE_statement = 39
    RULE_assignment_statement = 40
    RULE_func_statement = 41
    RULE_if_statement = 42
    RULE_else_statement = 43
    RULE_for_statement = 44
    RULE_print_statement = 45
    RULE_condition = 46
    RULE_logic_op = 47
    RULE_variable = 48
    RULE_variable_scalar = 49
    RULE_variable_vec = 50
    RULE_variable_mat = 51

    ruleNames =  [ "program", "addition", "subtraction", "multiplication", 
                   "modulo_op", "matmul", "mat_add", "mat_scalar_mult", 
                   "dot_product", "vec_add", "vec_scalar_mult", "sin", "cos", 
                   "sqrt", "root", "log", "vector", "matrix", "trig_func", 
                   "scalar_op", "vector_op", "matrix_op", "operation", "built_in_func", 
                   "expression", "exp_func", "abs_func", "ceil_func", "floor_func", 
                   "arcsin_func", "arccos_func", "arctan_func", "sinh_func", 
                   "cosh_func", "factorial_func", "params", "param", "empty", 
                   "statements", "statement", "assignment_statement", "func_statement", 
                   "if_statement", "else_statement", "for_statement", "print_statement", 
                   "condition", "logic_op", "variable", "variable_scalar", 
                   "variable_vec", "variable_mat" ]

    EOF = Token.EOF
    PLUS=1
    MINUS=2
    MULTIPLICATION=3
    DIVISION=4
    MOD=5
    POWER=6
    EQUALS=7
    NOT_EQUALS=8
    LESS_THAN=9
    GREATER_THAN=10
    LESS_THAN_EQUALS=11
    GREATER_THAN_EQUALS=12
    ASSIGNMENT=13
    FACTORIAL=14
    COMMA=15
    EXP=16
    ABS=17
    CEIL=18
    FLOOR=19
    SIN=20
    COS=21
    LOG=22
    SQRT=23
    ROOT=24
    SINH=25
    COSH=26
    ARCSIN=27
    ARCCOS=28
    ARCTAN=29
    PAR_LEFT=30
    PAR_RIGHT=31
    BRACE_LEFT=32
    BRACE_RIGHT=33
    BRACKET_LEFT=34
    BRACKET_RIGHT=35
    SEMICOLON=36
    VEC_ID=37
    MAT_ID=38
    FUNC=39
    IF=40
    ELSE=41
    PRINT=42
    FOR=43
    NUMBER=44
    SPACE=45
    NEWLINE=46

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GrammarParser.EOF, 0)

        def statements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.StatementsContext)
            else:
                return self.getTypedRuleContext(GrammarParser.StatementsContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GrammarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 105 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 104
                self.statements()
                self.state = 107 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 138418239504384) != 0)):
                    break

            self.state = 109
            self.match(GrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def multiplication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MultiplicationContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MultiplicationContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_addition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddition" ):
                listener.enterAddition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddition" ):
                listener.exitAddition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddition" ):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)




    def addition(self):

        localctx = GrammarParser.AdditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_addition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 111
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 112
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 113
                self.multiplication()
                pass


            self.state = 119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 116
                self.match(GrammarParser.SPACE)
                self.state = 121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 122
            self.match(GrammarParser.PLUS)
            self.state = 126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 123
                self.match(GrammarParser.SPACE)
                self.state = 128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 129
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 130
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 131
                self.multiplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(GrammarParser.MINUS, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def multiplication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MultiplicationContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MultiplicationContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_subtraction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtraction" ):
                listener.enterSubtraction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtraction" ):
                listener.exitSubtraction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtraction" ):
                return visitor.visitSubtraction(self)
            else:
                return visitor.visitChildren(self)




    def subtraction(self):

        localctx = GrammarParser.SubtractionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_subtraction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 134
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 135
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 136
                self.multiplication()
                pass


            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 139
                self.match(GrammarParser.SPACE)
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 145
            self.match(GrammarParser.MINUS)
            self.state = 149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 146
                self.match(GrammarParser.SPACE)
                self.state = 151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 152
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 153
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 154
                self.multiplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_multiplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplication" ):
                listener.enterMultiplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplication" ):
                listener.exitMultiplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplication" ):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)




    def multiplication(self):

        localctx = GrammarParser.MultiplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_multiplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 157
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37]:
                self.state = 158
                self.variable_scalar()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 161
                self.match(GrammarParser.SPACE)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 167
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 168
                self.match(GrammarParser.SPACE)
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 174
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37]:
                self.state = 175
                self.variable_scalar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modulo_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(GrammarParser.MOD, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VariableContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_modulo_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo_op" ):
                listener.enterModulo_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo_op" ):
                listener.exitModulo_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModulo_op" ):
                return visitor.visitModulo_op(self)
            else:
                return visitor.visitChildren(self)




    def modulo_op(self):

        localctx = GrammarParser.Modulo_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modulo_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 178
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37, 38]:
                self.state = 179
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 182
                self.match(GrammarParser.SPACE)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(GrammarParser.MOD)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 189
                self.match(GrammarParser.SPACE)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 195
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37, 38]:
                self.state = 196
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatmulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def matrix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MatrixContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MatrixContext,i)


        def variable_mat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_matContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_matContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_matmul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatmul" ):
                listener.enterMatmul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatmul" ):
                listener.exitMatmul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatmul" ):
                return visitor.visitMatmul(self)
            else:
                return visitor.visitChildren(self)




    def matmul(self):

        localctx = GrammarParser.MatmulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_matmul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 199
                self.matrix()
                pass
            elif token in [38]:
                self.state = 200
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 203
                self.match(GrammarParser.SPACE)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 209
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 210
                self.match(GrammarParser.SPACE)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 216
                self.matrix()
                pass
            elif token in [38]:
                self.state = 217
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mat_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def matrix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MatrixContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MatrixContext,i)


        def variable_mat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_matContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_matContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_mat_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMat_add" ):
                listener.enterMat_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMat_add" ):
                listener.exitMat_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMat_add" ):
                return visitor.visitMat_add(self)
            else:
                return visitor.visitChildren(self)




    def mat_add(self):

        localctx = GrammarParser.Mat_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_mat_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 220
                self.matrix()
                pass
            elif token in [38]:
                self.state = 221
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 224
                self.match(GrammarParser.SPACE)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 230
            self.match(GrammarParser.PLUS)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 231
                self.match(GrammarParser.SPACE)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 237
                self.matrix()
                pass
            elif token in [38]:
                self.state = 238
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mat_scalar_multContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def matrix(self):
            return self.getTypedRuleContext(GrammarParser.MatrixContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_mat_scalar_mult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMat_scalar_mult" ):
                listener.enterMat_scalar_mult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMat_scalar_mult" ):
                listener.exitMat_scalar_mult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMat_scalar_mult" ):
                return visitor.visitMat_scalar_mult(self)
            else:
                return visitor.visitChildren(self)




    def mat_scalar_mult(self):

        localctx = GrammarParser.Mat_scalar_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_mat_scalar_mult)
        self._la = 0 # Token type
        try:
            self.state = 283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 241
                    self.matrix()
                    pass
                elif token in [38]:
                    self.state = 242
                    self.variable_mat()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 245
                    self.match(GrammarParser.SPACE)
                    self.state = 250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 251
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 252
                    self.match(GrammarParser.SPACE)
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 258
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 259
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [37, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 262
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 263
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 266
                    self.match(GrammarParser.SPACE)
                    self.state = 271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 272
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 273
                    self.match(GrammarParser.SPACE)
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 281
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 279
                    self.matrix()
                    pass
                elif token in [38]:
                    self.state = 280
                    self.variable_mat()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def variable_vec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_vecContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_vecContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_dot_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_product" ):
                listener.enterDot_product(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_product" ):
                listener.exitDot_product(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_product" ):
                return visitor.visitDot_product(self)
            else:
                return visitor.visitChildren(self)




    def dot_product(self):

        localctx = GrammarParser.Dot_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_dot_product)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 285
                self.vector()
                pass
            elif token in [37]:
                self.state = 286
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 289
                self.match(GrammarParser.SPACE)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 296
                self.match(GrammarParser.SPACE)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 302
                self.vector()
                pass
            elif token in [37]:
                self.state = 303
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vec_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def variable_vec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_vecContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_vecContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vec_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVec_add" ):
                listener.enterVec_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVec_add" ):
                listener.exitVec_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVec_add" ):
                return visitor.visitVec_add(self)
            else:
                return visitor.visitChildren(self)




    def vec_add(self):

        localctx = GrammarParser.Vec_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_vec_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 306
                self.vector()
                pass
            elif token in [37]:
                self.state = 307
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 310
                self.match(GrammarParser.SPACE)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(GrammarParser.PLUS)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 317
                self.match(GrammarParser.SPACE)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 323
                self.vector()
                pass
            elif token in [37]:
                self.state = 324
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vec_scalar_multContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def vector(self):
            return self.getTypedRuleContext(GrammarParser.VectorContext,0)


        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vec_scalar_mult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVec_scalar_mult" ):
                listener.enterVec_scalar_mult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVec_scalar_mult" ):
                listener.exitVec_scalar_mult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVec_scalar_mult" ):
                return visitor.visitVec_scalar_mult(self)
            else:
                return visitor.visitChildren(self)




    def vec_scalar_mult(self):

        localctx = GrammarParser.Vec_scalar_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_vec_scalar_mult)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 327
                    self.vector()
                    pass
                elif token in [37]:
                    self.state = 328
                    self.variable_vec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 331
                    self.match(GrammarParser.SPACE)
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 337
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 338
                    self.match(GrammarParser.SPACE)
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 344
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 345
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 348
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 349
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 352
                    self.match(GrammarParser.SPACE)
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 358
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 359
                    self.match(GrammarParser.SPACE)
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 365
                    self.vector()
                    pass
                elif token in [37]:
                    self.state = 366
                    self.variable_vec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(GrammarParser.SIN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSin" ):
                listener.enterSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSin" ):
                listener.exitSin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSin" ):
                return visitor.visitSin(self)
            else:
                return visitor.visitChildren(self)




    def sin(self):

        localctx = GrammarParser.SinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_sin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(GrammarParser.SIN)
            self.state = 372
            self.match(GrammarParser.PAR_LEFT)
            self.state = 373
            self.expression()
            self.state = 374
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(GrammarParser.COS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_cos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCos" ):
                listener.enterCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCos" ):
                listener.exitCos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCos" ):
                return visitor.visitCos(self)
            else:
                return visitor.visitChildren(self)




    def cos(self):

        localctx = GrammarParser.CosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_cos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(GrammarParser.COS)
            self.state = 377
            self.match(GrammarParser.PAR_LEFT)
            self.state = 378
            self.expression()
            self.state = 379
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqrtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQRT(self):
            return self.getToken(GrammarParser.SQRT, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sqrt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqrt" ):
                listener.enterSqrt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqrt" ):
                listener.exitSqrt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqrt" ):
                return visitor.visitSqrt(self)
            else:
                return visitor.visitChildren(self)




    def sqrt(self):

        localctx = GrammarParser.SqrtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sqrt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(GrammarParser.SQRT)
            self.state = 382
            self.match(GrammarParser.PAR_LEFT)
            self.state = 383
            self.expression()
            self.state = 384
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT(self):
            return self.getToken(GrammarParser.ROOT, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(GrammarParser.COMMA, 0)

        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = GrammarParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(GrammarParser.ROOT)
            self.state = 387
            self.match(GrammarParser.PAR_LEFT)
            self.state = 388
            self.expression()
            self.state = 389
            self.match(GrammarParser.COMMA)
            self.state = 390
            self.match(GrammarParser.NUMBER)
            self.state = 391
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(GrammarParser.LOG, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog" ):
                listener.enterLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog" ):
                listener.exitLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog" ):
                return visitor.visitLog(self)
            else:
                return visitor.visitChildren(self)




    def log(self):

        localctx = GrammarParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(GrammarParser.LOG)
            self.state = 394
            self.match(GrammarParser.PAR_LEFT)
            self.state = 395
            self.expression()
            self.state = 396
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(GrammarParser.BRACKET_LEFT, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def BRACKET_RIGHT(self):
            return self.getToken(GrammarParser.BRACKET_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector" ):
                return visitor.visitVector(self)
            else:
                return visitor.visitChildren(self)




    def vector(self):

        localctx = GrammarParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(GrammarParser.BRACKET_LEFT)
            self.state = 399
            self.match(GrammarParser.NUMBER)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 400
                self.match(GrammarParser.COMMA)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 401
                    self.match(GrammarParser.SPACE)
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 407
                self.match(GrammarParser.NUMBER)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 413
            self.match(GrammarParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(GrammarParser.BRACKET_LEFT, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def BRACKET_RIGHT(self):
            return self.getToken(GrammarParser.BRACKET_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrix" ):
                return visitor.visitMatrix(self)
            else:
                return visitor.visitChildren(self)




    def matrix(self):

        localctx = GrammarParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(GrammarParser.BRACKET_LEFT)
            self.state = 416
            self.vector()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 417
                self.match(GrammarParser.COMMA)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 418
                    self.match(GrammarParser.SPACE)
                    self.state = 423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 424
                self.vector()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(GrammarParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trig_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sin(self):
            return self.getTypedRuleContext(GrammarParser.SinContext,0)


        def cos(self):
            return self.getTypedRuleContext(GrammarParser.CosContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_trig_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrig_func" ):
                listener.enterTrig_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrig_func" ):
                listener.exitTrig_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrig_func" ):
                return visitor.visitTrig_func(self)
            else:
                return visitor.visitChildren(self)




    def trig_func(self):

        localctx = GrammarParser.Trig_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_trig_func)
        try:
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.sin()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.cos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addition(self):
            return self.getTypedRuleContext(GrammarParser.AdditionContext,0)


        def subtraction(self):
            return self.getTypedRuleContext(GrammarParser.SubtractionContext,0)


        def multiplication(self):
            return self.getTypedRuleContext(GrammarParser.MultiplicationContext,0)


        def modulo_op(self):
            return self.getTypedRuleContext(GrammarParser.Modulo_opContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_scalar_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_op" ):
                listener.enterScalar_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_op" ):
                listener.exitScalar_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_op" ):
                return visitor.visitScalar_op(self)
            else:
                return visitor.visitChildren(self)




    def scalar_op(self):

        localctx = GrammarParser.Scalar_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_scalar_op)
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.addition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.subtraction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.multiplication()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.modulo_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_product(self):
            return self.getTypedRuleContext(GrammarParser.Dot_productContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_vector_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_op" ):
                listener.enterVector_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_op" ):
                listener.exitVector_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_op" ):
                return visitor.visitVector_op(self)
            else:
                return visitor.visitChildren(self)




    def vector_op(self):

        localctx = GrammarParser.Vector_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_vector_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.dot_product()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matmul(self):
            return self.getTypedRuleContext(GrammarParser.MatmulContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_matrix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_op" ):
                listener.enterMatrix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_op" ):
                listener.exitMatrix_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrix_op" ):
                return visitor.visitMatrix_op(self)
            else:
                return visitor.visitChildren(self)




    def matrix_op(self):

        localctx = GrammarParser.Matrix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_matrix_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.matmul()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matmul(self):
            return self.getTypedRuleContext(GrammarParser.MatmulContext,0)


        def dot_product(self):
            return self.getTypedRuleContext(GrammarParser.Dot_productContext,0)


        def scalar_op(self):
            return self.getTypedRuleContext(GrammarParser.Scalar_opContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation" ):
                listener.enterOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation" ):
                listener.exitOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation" ):
                return visitor.visitOperation(self)
            else:
                return visitor.visitChildren(self)




    def operation(self):

        localctx = GrammarParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_operation)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.matmul()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.dot_product()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.scalar_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trig_func(self):
            return self.getTypedRuleContext(GrammarParser.Trig_funcContext,0)


        def sqrt(self):
            return self.getTypedRuleContext(GrammarParser.SqrtContext,0)


        def root(self):
            return self.getTypedRuleContext(GrammarParser.RootContext,0)


        def log(self):
            return self.getTypedRuleContext(GrammarParser.LogContext,0)


        def exp_func(self):
            return self.getTypedRuleContext(GrammarParser.Exp_funcContext,0)


        def abs_func(self):
            return self.getTypedRuleContext(GrammarParser.Abs_funcContext,0)


        def ceil_func(self):
            return self.getTypedRuleContext(GrammarParser.Ceil_funcContext,0)


        def floor_func(self):
            return self.getTypedRuleContext(GrammarParser.Floor_funcContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_built_in_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in_func" ):
                listener.enterBuilt_in_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in_func" ):
                listener.exitBuilt_in_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuilt_in_func" ):
                return visitor.visitBuilt_in_func(self)
            else:
                return visitor.visitChildren(self)




    def built_in_func(self):

        localctx = GrammarParser.Built_in_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_built_in_func)
        try:
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.trig_func()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.sqrt()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 453
                self.root()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 454
                self.log()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 5)
                self.state = 455
                self.exp_func()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 456
                self.abs_func()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 457
                self.ceil_func()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 458
                self.floor_func()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def built_in_func(self):
            return self.getTypedRuleContext(GrammarParser.Built_in_funcContext,0)


        def operation(self):
            return self.getTypedRuleContext(GrammarParser.OperationContext,0)


        def matrix(self):
            return self.getTypedRuleContext(GrammarParser.MatrixContext,0)


        def vector(self):
            return self.getTypedRuleContext(GrammarParser.VectorContext,0)


        def variable(self):
            return self.getTypedRuleContext(GrammarParser.VariableContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = GrammarParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expression)
        try:
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.built_in_func()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.operation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.matrix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.vector()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 465
                self.variable()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.match(GrammarParser.NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(GrammarParser.EXP, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_exp_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_func" ):
                listener.enterExp_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_func" ):
                listener.exitExp_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExp_func" ):
                return visitor.visitExp_func(self)
            else:
                return visitor.visitChildren(self)




    def exp_func(self):

        localctx = GrammarParser.Exp_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_exp_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(GrammarParser.EXP)
            self.state = 470
            self.match(GrammarParser.PAR_LEFT)
            self.state = 471
            self.expression()
            self.state = 472
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(GrammarParser.ABS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_abs_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_func" ):
                listener.enterAbs_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_func" ):
                listener.exitAbs_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbs_func" ):
                return visitor.visitAbs_func(self)
            else:
                return visitor.visitChildren(self)




    def abs_func(self):

        localctx = GrammarParser.Abs_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_abs_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(GrammarParser.ABS)
            self.state = 475
            self.match(GrammarParser.PAR_LEFT)
            self.state = 476
            self.expression()
            self.state = 477
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CEIL(self):
            return self.getToken(GrammarParser.CEIL, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_ceil_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_func" ):
                listener.enterCeil_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_func" ):
                listener.exitCeil_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCeil_func" ):
                return visitor.visitCeil_func(self)
            else:
                return visitor.visitChildren(self)




    def ceil_func(self):

        localctx = GrammarParser.Ceil_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ceil_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(GrammarParser.CEIL)
            self.state = 480
            self.match(GrammarParser.PAR_LEFT)
            self.state = 481
            self.expression()
            self.state = 482
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOOR(self):
            return self.getToken(GrammarParser.FLOOR, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_floor_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_func" ):
                listener.enterFloor_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_func" ):
                listener.exitFloor_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloor_func" ):
                return visitor.visitFloor_func(self)
            else:
                return visitor.visitChildren(self)




    def floor_func(self):

        localctx = GrammarParser.Floor_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_floor_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(GrammarParser.FLOOR)
            self.state = 485
            self.match(GrammarParser.PAR_LEFT)
            self.state = 486
            self.expression()
            self.state = 487
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arcsin_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCSIN(self):
            return self.getToken(GrammarParser.ARCSIN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arcsin_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcsin_func" ):
                listener.enterArcsin_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcsin_func" ):
                listener.exitArcsin_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArcsin_func" ):
                return visitor.visitArcsin_func(self)
            else:
                return visitor.visitChildren(self)




    def arcsin_func(self):

        localctx = GrammarParser.Arcsin_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arcsin_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(GrammarParser.ARCSIN)
            self.state = 490
            self.match(GrammarParser.PAR_LEFT)
            self.state = 491
            self.expression()
            self.state = 492
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arccos_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCCOS(self):
            return self.getToken(GrammarParser.ARCCOS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arccos_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArccos_func" ):
                listener.enterArccos_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArccos_func" ):
                listener.exitArccos_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArccos_func" ):
                return visitor.visitArccos_func(self)
            else:
                return visitor.visitChildren(self)




    def arccos_func(self):

        localctx = GrammarParser.Arccos_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arccos_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(GrammarParser.ARCCOS)
            self.state = 495
            self.match(GrammarParser.PAR_LEFT)
            self.state = 496
            self.expression()
            self.state = 497
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arctan_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCTAN(self):
            return self.getToken(GrammarParser.ARCTAN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arctan_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArctan_func" ):
                listener.enterArctan_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArctan_func" ):
                listener.exitArctan_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArctan_func" ):
                return visitor.visitArctan_func(self)
            else:
                return visitor.visitChildren(self)




    def arctan_func(self):

        localctx = GrammarParser.Arctan_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arctan_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(GrammarParser.ARCTAN)
            self.state = 500
            self.match(GrammarParser.PAR_LEFT)
            self.state = 501
            self.expression()
            self.state = 502
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sinh_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINH(self):
            return self.getToken(GrammarParser.SINH, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sinh_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSinh_func" ):
                listener.enterSinh_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSinh_func" ):
                listener.exitSinh_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSinh_func" ):
                return visitor.visitSinh_func(self)
            else:
                return visitor.visitChildren(self)




    def sinh_func(self):

        localctx = GrammarParser.Sinh_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sinh_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(GrammarParser.SINH)
            self.state = 505
            self.match(GrammarParser.PAR_LEFT)
            self.state = 506
            self.expression()
            self.state = 507
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cosh_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COSH(self):
            return self.getToken(GrammarParser.COSH, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_cosh_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCosh_func" ):
                listener.enterCosh_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCosh_func" ):
                listener.exitCosh_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCosh_func" ):
                return visitor.visitCosh_func(self)
            else:
                return visitor.visitChildren(self)




    def cosh_func(self):

        localctx = GrammarParser.Cosh_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_cosh_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(GrammarParser.COSH)
            self.state = 510
            self.match(GrammarParser.PAR_LEFT)
            self.state = 511
            self.expression()
            self.state = 512
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factorial_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def FACTORIAL(self):
            return self.getToken(GrammarParser.FACTORIAL, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_factorial_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactorial_func" ):
                listener.enterFactorial_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactorial_func" ):
                listener.exitFactorial_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactorial_func" ):
                return visitor.visitFactorial_func(self)
            else:
                return visitor.visitChildren(self)




    def factorial_func(self):

        localctx = GrammarParser.Factorial_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_factorial_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.expression()
            self.state = 515
            self.match(GrammarParser.FACTORIAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ParamContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ParamContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def empty(self):
            return self.getTypedRuleContext(GrammarParser.EmptyContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = GrammarParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_params)
        self._la = 0 # Token type
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.param()
                self.state = 521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 518
                        self.match(GrammarParser.SPACE) 
                    self.state = 523
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 524
                    self.match(GrammarParser.COMMA)
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==45:
                        self.state = 525
                        self.match(GrammarParser.SPACE)
                        self.state = 530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 531
                    self.param()
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [31, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.empty()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(GrammarParser.VariableContext,0)


        def ASSIGNMENT(self):
            return self.getToken(GrammarParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = GrammarParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_param)
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.variable()
                self.state = 542
                self.match(GrammarParser.ASSIGNMENT)
                self.state = 543
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GrammarParser.RULE_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty" ):
                listener.enterEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty" ):
                listener.exitEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty" ):
                return visitor.visitEmpty(self)
            else:
                return visitor.visitChildren(self)




    def empty(self):

        localctx = GrammarParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_empty)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(GrammarParser.StatementContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = GrammarParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_statements)
        try:
            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 550
                self.statement()
                self.state = 551
                self.statements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def assignment_statement(self):
            return self.getTypedRuleContext(GrammarParser.Assignment_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(GrammarParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(GrammarParser.For_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(GrammarParser.Print_statementContext,0)


        def func_statement(self):
            return self.getTypedRuleContext(GrammarParser.Func_statementContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = GrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 555
                self.match(GrammarParser.SPACE)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 561
                self.assignment_statement()

            elif la_ == 2:
                self.state = 562
                self.expression()

            elif la_ == 3:
                self.state = 563
                self.if_statement()

            elif la_ == 4:
                self.state = 564
                self.for_statement()

            elif la_ == 5:
                self.state = 565
                self.print_statement()

            elif la_ == 6:
                self.state = 566
                self.func_statement()


            self.state = 569
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(GrammarParser.VariableContext,0)


        def ASSIGNMENT(self):
            return self.getToken(GrammarParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = GrammarParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assignment_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.variable()
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 572
                self.match(GrammarParser.SPACE)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 578
            self.match(GrammarParser.ASSIGNMENT)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 579
                self.match(GrammarParser.SPACE)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 585
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GrammarParser.FUNC, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def params(self):
            return self.getTypedRuleContext(GrammarParser.ParamsContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_func_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_statement" ):
                listener.enterFunc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_statement" ):
                listener.exitFunc_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_statement" ):
                return visitor.visitFunc_statement(self)
            else:
                return visitor.visitChildren(self)




    def func_statement(self):

        localctx = GrammarParser.Func_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_func_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(GrammarParser.FUNC)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 588
                self.match(GrammarParser.SPACE)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(GrammarParser.PAR_LEFT)
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self.match(GrammarParser.SPACE) 
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 601
            self.params()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 602
                self.match(GrammarParser.SPACE)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            self.match(GrammarParser.PAR_RIGHT)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 609
                self.match(GrammarParser.SPACE)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.match(GrammarParser.BRACE_LEFT)
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.match(GrammarParser.SPACE) 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 622
            self.statements()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 623
                self.match(GrammarParser.SPACE)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cond = None # ConditionContext
            self.if_body = None # StatementsContext
            self.else_body = None # Else_statementContext

        def IF(self):
            return self.getToken(GrammarParser.IF, 0)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def condition(self):
            return self.getTypedRuleContext(GrammarParser.ConditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def else_statement(self):
            return self.getTypedRuleContext(GrammarParser.Else_statementContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = GrammarParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(GrammarParser.IF)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 632
                    self.match(GrammarParser.SPACE)
                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 638
                localctx.cond = self.condition()
                self.state = 639
                self.match(GrammarParser.PAR_RIGHT)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 640
                    self.match(GrammarParser.SPACE)
                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 646
                self.match(GrammarParser.BRACE_LEFT)
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 647
                        self.match(GrammarParser.SPACE) 
                    self.state = 652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                self.state = 656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 653
                        self.match(GrammarParser.NEWLINE) 
                    self.state = 658
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 659
                localctx.if_body = self.statements()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==46:
                    self.state = 660
                    self.match(GrammarParser.NEWLINE)
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 666
                self.match(GrammarParser.BRACE_RIGHT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.match(GrammarParser.IF)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 669
                    self.match(GrammarParser.SPACE)
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 675
                localctx.cond = self.condition()
                self.state = 676
                self.match(GrammarParser.PAR_RIGHT)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 677
                    self.match(GrammarParser.SPACE)
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 683
                self.match(GrammarParser.BRACE_LEFT)
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 684
                        self.match(GrammarParser.SPACE) 
                    self.state = 689
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                self.state = 693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 690
                        self.match(GrammarParser.NEWLINE) 
                    self.state = 695
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                self.state = 696
                localctx.if_body = self.statements()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 697
                    self.match(GrammarParser.SPACE)
                    self.state = 702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 703
                self.match(GrammarParser.BRACE_RIGHT)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 704
                    self.match(GrammarParser.SPACE)
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==46:
                    self.state = 710
                    self.match(GrammarParser.NEWLINE)
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 716
                localctx.else_body = self.else_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementsContext

        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_else_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_statement" ):
                listener.enterElse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_statement" ):
                listener.exitElse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)




    def else_statement(self):

        localctx = GrammarParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(GrammarParser.ELSE)
            self.state = 724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 721
                    self.match(GrammarParser.SPACE) 
                self.state = 726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 727
                    self.match(GrammarParser.NEWLINE) 
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 733
            localctx.body = self.statements()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 734
                self.match(GrammarParser.NEWLINE)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 740
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.init = None # Assignment_statementContext
            self.cond = None # ConditionContext
            self.update = None # Assignment_statementContext
            self.body = None # StatementsContext

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SEMICOLON)
            else:
                return self.getToken(GrammarParser.SEMICOLON, i)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def assignment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Assignment_statementContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Assignment_statementContext,i)


        def condition(self):
            return self.getTypedRuleContext(GrammarParser.ConditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_statement(self):

        localctx = GrammarParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(GrammarParser.FOR)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 743
                self.match(GrammarParser.SPACE)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 749
            localctx.init = self.assignment_statement()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 750
                self.match(GrammarParser.SPACE)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 756
            self.match(GrammarParser.SEMICOLON)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 757
                self.match(GrammarParser.SPACE)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            localctx.cond = self.condition()
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 764
                self.match(GrammarParser.SPACE)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(GrammarParser.SEMICOLON)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 771
                self.match(GrammarParser.SPACE)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 777
            localctx.update = self.assignment_statement()
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 778
                self.match(GrammarParser.SPACE)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(GrammarParser.PAR_RIGHT)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 785
                self.match(GrammarParser.SPACE)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.match(GrammarParser.BRACE_LEFT)
            self.state = 795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self.match(GrammarParser.NEWLINE) 
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 798
                    self.match(GrammarParser.SPACE) 
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 804
            localctx.body = self.statements()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 805
                self.match(GrammarParser.SPACE)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 811
                self.match(GrammarParser.NEWLINE)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(GrammarParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_print_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)




    def print_statement(self):

        localctx = GrammarParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_print_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(GrammarParser.PRINT)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 820
                self.match(GrammarParser.SPACE)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self.expression()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 827
                self.match(GrammarParser.SPACE)
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # ExpressionContext
            self.op = None # Logic_opContext
            self.right = None # ExpressionContext

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ExpressionContext,i)


        def logic_op(self):
            return self.getTypedRuleContext(GrammarParser.Logic_opContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = GrammarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            localctx.left = self.expression()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 836
                self.match(GrammarParser.SPACE)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 842
            localctx.op = self.logic_op()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 843
                self.match(GrammarParser.SPACE)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            localctx.right = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logic_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(GrammarParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(GrammarParser.NOT_EQUALS, 0)

        def LESS_THAN(self):
            return self.getToken(GrammarParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(GrammarParser.GREATER_THAN, 0)

        def LESS_THAN_EQUALS(self):
            return self.getToken(GrammarParser.LESS_THAN_EQUALS, 0)

        def GREATER_THAN_EQUALS(self):
            return self.getToken(GrammarParser.GREATER_THAN_EQUALS, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_logic_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic_op" ):
                listener.enterLogic_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic_op" ):
                listener.exitLogic_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic_op" ):
                return visitor.visitLogic_op(self)
            else:
                return visitor.visitChildren(self)




    def logic_op(self):

        localctx = GrammarParser.Logic_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_logic_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = GrammarParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_variable)
        try:
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.variable_scalar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.variable_vec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.variable_mat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VEC_ID(self):
            return self.getToken(GrammarParser.VEC_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_scalar" ):
                listener.enterVariable_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_scalar" ):
                listener.exitVariable_scalar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_scalar" ):
                return visitor.visitVariable_scalar(self)
            else:
                return visitor.visitChildren(self)




    def variable_scalar(self):

        localctx = GrammarParser.Variable_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_variable_scalar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(GrammarParser.VEC_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_vecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VEC_ID(self):
            return self.getToken(GrammarParser.VEC_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_vec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_vec" ):
                listener.enterVariable_vec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_vec" ):
                listener.exitVariable_vec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_vec" ):
                return visitor.visitVariable_vec(self)
            else:
                return visitor.visitChildren(self)




    def variable_vec(self):

        localctx = GrammarParser.Variable_vecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_variable_vec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(GrammarParser.VEC_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_matContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAT_ID(self):
            return self.getToken(GrammarParser.MAT_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_mat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_mat" ):
                listener.enterVariable_mat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_mat" ):
                listener.exitVariable_mat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_mat" ):
                return visitor.visitVariable_mat(self)
            else:
                return visitor.visitChildren(self)




    def variable_mat(self):

        localctx = GrammarParser.Variable_matContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_variable_mat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(GrammarParser.MAT_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





