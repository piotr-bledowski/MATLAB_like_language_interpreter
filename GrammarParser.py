# Generated from Grammar.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,46,916,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,1,0,4,0,110,8,0,11,0,12,0,111,1,0,1,0,1,1,1,1,1,1,3,1,
        119,8,1,1,1,5,1,122,8,1,10,1,12,1,125,9,1,1,1,1,1,5,1,129,8,1,10,
        1,12,1,132,9,1,1,1,1,1,1,1,3,1,137,8,1,1,2,1,2,1,2,3,2,142,8,2,1,
        2,5,2,145,8,2,10,2,12,2,148,9,2,1,2,1,2,5,2,152,8,2,10,2,12,2,155,
        9,2,1,2,1,2,1,2,3,2,160,8,2,1,3,1,3,3,3,164,8,3,1,3,5,3,167,8,3,
        10,3,12,3,170,9,3,1,3,1,3,5,3,174,8,3,10,3,12,3,177,9,3,1,3,1,3,
        3,3,181,8,3,1,4,1,4,3,4,185,8,4,1,4,5,4,188,8,4,10,4,12,4,191,9,
        4,1,4,1,4,5,4,195,8,4,10,4,12,4,198,9,4,1,4,1,4,3,4,202,8,4,1,5,
        1,5,3,5,206,8,5,1,5,5,5,209,8,5,10,5,12,5,212,9,5,1,5,1,5,5,5,216,
        8,5,10,5,12,5,219,9,5,1,5,1,5,3,5,223,8,5,1,6,1,6,3,6,227,8,6,1,
        6,5,6,230,8,6,10,6,12,6,233,9,6,1,6,1,6,5,6,237,8,6,10,6,12,6,240,
        9,6,1,6,1,6,3,6,244,8,6,1,7,1,7,3,7,248,8,7,1,7,5,7,251,8,7,10,7,
        12,7,254,9,7,1,7,1,7,5,7,258,8,7,10,7,12,7,261,9,7,1,7,1,7,3,7,265,
        8,7,1,7,1,7,3,7,269,8,7,1,7,5,7,272,8,7,10,7,12,7,275,9,7,1,7,1,
        7,5,7,279,8,7,10,7,12,7,282,9,7,1,7,1,7,3,7,286,8,7,3,7,288,8,7,
        1,8,1,8,3,8,292,8,8,1,8,5,8,295,8,8,10,8,12,8,298,9,8,1,8,1,8,5,
        8,302,8,8,10,8,12,8,305,9,8,1,8,1,8,3,8,309,8,8,1,9,1,9,3,9,313,
        8,9,1,9,5,9,316,8,9,10,9,12,9,319,9,9,1,9,1,9,5,9,323,8,9,10,9,12,
        9,326,9,9,1,9,1,9,3,9,330,8,9,1,10,1,10,3,10,334,8,10,1,10,5,10,
        337,8,10,10,10,12,10,340,9,10,1,10,1,10,5,10,344,8,10,10,10,12,10,
        347,9,10,1,10,1,10,3,10,351,8,10,1,10,1,10,3,10,355,8,10,1,10,5,
        10,358,8,10,10,10,12,10,361,9,10,1,10,1,10,5,10,365,8,10,10,10,12,
        10,368,9,10,1,10,1,10,3,10,372,8,10,3,10,374,8,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,5,16,407,8,16,10,16,12,16,410,9,16,1,16,5,16,413,8,16,
        10,16,12,16,416,9,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,424,8,17,
        10,17,12,17,427,9,17,1,17,5,17,430,8,17,10,17,12,17,433,9,17,1,17,
        1,17,1,18,1,18,3,18,439,8,18,1,19,1,19,1,19,1,19,3,19,445,8,19,1,
        20,1,20,1,20,3,20,450,8,20,1,21,1,21,1,21,3,21,455,8,21,1,22,1,22,
        1,22,3,22,460,8,22,1,23,1,23,1,23,3,23,465,8,23,1,24,1,24,1,24,3,
        24,470,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,479,8,25,1,26,
        1,26,1,26,1,26,3,26,485,8,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,5,37,537,8,37,10,37,12,37,540,9,37,1,37,1,37,
        5,37,544,8,37,10,37,12,37,547,9,37,1,37,5,37,550,8,37,10,37,12,37,
        553,9,37,1,37,3,37,556,8,37,1,38,1,38,1,38,1,38,1,38,3,38,563,8,
        38,1,39,1,39,1,40,1,40,1,40,1,40,3,40,571,8,40,1,41,5,41,574,8,41,
        10,41,12,41,577,9,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,585,8,41,
        1,41,1,41,1,42,1,42,5,42,591,8,42,10,42,12,42,594,9,42,1,42,1,42,
        5,42,598,8,42,10,42,12,42,601,9,42,1,42,1,42,1,42,1,42,5,42,607,
        8,42,10,42,12,42,610,9,42,1,42,1,42,5,42,614,8,42,10,42,12,42,617,
        9,42,1,42,1,42,1,42,1,42,5,42,623,8,42,10,42,12,42,626,9,42,1,42,
        1,42,5,42,630,8,42,10,42,12,42,633,9,42,1,42,1,42,3,42,637,8,42,
        1,43,1,43,5,43,641,8,43,10,43,12,43,644,9,43,1,43,1,43,5,43,648,
        8,43,10,43,12,43,651,9,43,1,43,1,43,5,43,655,8,43,10,43,12,43,658,
        9,43,1,43,1,43,5,43,662,8,43,10,43,12,43,665,9,43,1,43,1,43,5,43,
        669,8,43,10,43,12,43,672,9,43,1,43,1,43,5,43,676,8,43,10,43,12,43,
        679,9,43,1,43,1,43,1,44,1,44,5,44,685,8,44,10,44,12,44,688,9,44,
        1,44,1,44,1,44,5,44,693,8,44,10,44,12,44,696,9,44,1,44,1,44,5,44,
        700,8,44,10,44,12,44,703,9,44,1,44,5,44,706,8,44,10,44,12,44,709,
        9,44,1,44,1,44,5,44,713,8,44,10,44,12,44,716,9,44,1,44,1,44,1,44,
        1,44,5,44,722,8,44,10,44,12,44,725,9,44,1,44,1,44,1,44,5,44,730,
        8,44,10,44,12,44,733,9,44,1,44,1,44,5,44,737,8,44,10,44,12,44,740,
        9,44,1,44,5,44,743,8,44,10,44,12,44,746,9,44,1,44,1,44,5,44,750,
        8,44,10,44,12,44,753,9,44,1,44,1,44,5,44,757,8,44,10,44,12,44,760,
        9,44,1,44,5,44,763,8,44,10,44,12,44,766,9,44,1,44,1,44,3,44,770,
        8,44,1,45,1,45,5,45,774,8,45,10,45,12,45,777,9,45,1,45,5,45,780,
        8,45,10,45,12,45,783,9,45,1,45,1,45,5,45,787,8,45,10,45,12,45,790,
        9,45,1,45,1,45,1,46,1,46,5,46,796,8,46,10,46,12,46,799,9,46,1,46,
        1,46,5,46,803,8,46,10,46,12,46,806,9,46,1,46,1,46,5,46,810,8,46,
        10,46,12,46,813,9,46,1,46,1,46,5,46,817,8,46,10,46,12,46,820,9,46,
        1,46,1,46,5,46,824,8,46,10,46,12,46,827,9,46,1,46,1,46,5,46,831,
        8,46,10,46,12,46,834,9,46,1,46,1,46,5,46,838,8,46,10,46,12,46,841,
        9,46,1,46,1,46,5,46,845,8,46,10,46,12,46,848,9,46,1,46,5,46,851,
        8,46,10,46,12,46,854,9,46,1,46,1,46,5,46,858,8,46,10,46,12,46,861,
        9,46,1,46,5,46,864,8,46,10,46,12,46,867,9,46,1,46,1,46,1,47,1,47,
        5,47,873,8,47,10,47,12,47,876,9,47,1,47,1,47,5,47,880,8,47,10,47,
        12,47,883,9,47,1,47,1,47,1,48,1,48,5,48,889,8,48,10,48,12,48,892,
        9,48,1,48,1,48,5,48,896,8,48,10,48,12,48,899,9,48,1,48,1,48,1,49,
        1,49,1,50,1,50,1,50,3,50,908,8,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,53,0,0,54,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,0,1,1,0,7,12,1003,0,109,
        1,0,0,0,2,118,1,0,0,0,4,141,1,0,0,0,6,163,1,0,0,0,8,184,1,0,0,0,
        10,205,1,0,0,0,12,226,1,0,0,0,14,287,1,0,0,0,16,291,1,0,0,0,18,312,
        1,0,0,0,20,373,1,0,0,0,22,375,1,0,0,0,24,380,1,0,0,0,26,385,1,0,
        0,0,28,390,1,0,0,0,30,397,1,0,0,0,32,402,1,0,0,0,34,419,1,0,0,0,
        36,438,1,0,0,0,38,444,1,0,0,0,40,449,1,0,0,0,42,454,1,0,0,0,44,459,
        1,0,0,0,46,464,1,0,0,0,48,469,1,0,0,0,50,478,1,0,0,0,52,484,1,0,
        0,0,54,486,1,0,0,0,56,491,1,0,0,0,58,496,1,0,0,0,60,501,1,0,0,0,
        62,506,1,0,0,0,64,511,1,0,0,0,66,516,1,0,0,0,68,521,1,0,0,0,70,526,
        1,0,0,0,72,531,1,0,0,0,74,555,1,0,0,0,76,562,1,0,0,0,78,564,1,0,
        0,0,80,570,1,0,0,0,82,575,1,0,0,0,84,636,1,0,0,0,86,638,1,0,0,0,
        88,769,1,0,0,0,90,771,1,0,0,0,92,793,1,0,0,0,94,870,1,0,0,0,96,886,
        1,0,0,0,98,902,1,0,0,0,100,907,1,0,0,0,102,909,1,0,0,0,104,911,1,
        0,0,0,106,913,1,0,0,0,108,110,3,80,40,0,109,108,1,0,0,0,110,111,
        1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,
        5,0,0,1,114,1,1,0,0,0,115,119,5,44,0,0,116,119,3,102,51,0,117,119,
        3,6,3,0,118,115,1,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,123,
        1,0,0,0,120,122,5,45,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,
        1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,130,
        5,1,0,0,127,129,5,45,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,
        1,0,0,0,130,131,1,0,0,0,131,136,1,0,0,0,132,130,1,0,0,0,133,137,
        5,44,0,0,134,137,3,102,51,0,135,137,3,6,3,0,136,133,1,0,0,0,136,
        134,1,0,0,0,136,135,1,0,0,0,137,3,1,0,0,0,138,142,5,44,0,0,139,142,
        3,102,51,0,140,142,3,6,3,0,141,138,1,0,0,0,141,139,1,0,0,0,141,140,
        1,0,0,0,142,146,1,0,0,0,143,145,5,45,0,0,144,143,1,0,0,0,145,148,
        1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,
        1,0,0,0,149,153,5,2,0,0,150,152,5,45,0,0,151,150,1,0,0,0,152,155,
        1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,159,1,0,0,0,155,153,
        1,0,0,0,156,160,5,44,0,0,157,160,3,102,51,0,158,160,3,6,3,0,159,
        156,1,0,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,5,1,0,0,0,161,164,
        5,44,0,0,162,164,3,102,51,0,163,161,1,0,0,0,163,162,1,0,0,0,164,
        168,1,0,0,0,165,167,5,45,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,
        175,5,3,0,0,172,174,5,45,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,
        173,1,0,0,0,175,176,1,0,0,0,176,180,1,0,0,0,177,175,1,0,0,0,178,
        181,5,44,0,0,179,181,3,102,51,0,180,178,1,0,0,0,180,179,1,0,0,0,
        181,7,1,0,0,0,182,185,5,44,0,0,183,185,3,100,50,0,184,182,1,0,0,
        0,184,183,1,0,0,0,185,189,1,0,0,0,186,188,5,45,0,0,187,186,1,0,0,
        0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,1,0,0,
        0,191,189,1,0,0,0,192,196,5,5,0,0,193,195,5,45,0,0,194,193,1,0,0,
        0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,201,1,0,0,
        0,198,196,1,0,0,0,199,202,5,44,0,0,200,202,3,100,50,0,201,199,1,
        0,0,0,201,200,1,0,0,0,202,9,1,0,0,0,203,206,3,34,17,0,204,206,3,
        106,53,0,205,203,1,0,0,0,205,204,1,0,0,0,206,210,1,0,0,0,207,209,
        5,45,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,
        1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,217,5,3,0,0,214,216,
        5,45,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,
        1,0,0,0,218,222,1,0,0,0,219,217,1,0,0,0,220,223,3,34,17,0,221,223,
        3,106,53,0,222,220,1,0,0,0,222,221,1,0,0,0,223,11,1,0,0,0,224,227,
        3,34,17,0,225,227,3,106,53,0,226,224,1,0,0,0,226,225,1,0,0,0,227,
        231,1,0,0,0,228,230,5,45,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,
        229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,
        238,5,1,0,0,235,237,5,45,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,
        236,1,0,0,0,238,239,1,0,0,0,239,243,1,0,0,0,240,238,1,0,0,0,241,
        244,3,34,17,0,242,244,3,106,53,0,243,241,1,0,0,0,243,242,1,0,0,0,
        244,13,1,0,0,0,245,248,3,34,17,0,246,248,3,106,53,0,247,245,1,0,
        0,0,247,246,1,0,0,0,248,252,1,0,0,0,249,251,5,45,0,0,250,249,1,0,
        0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,
        0,0,254,252,1,0,0,0,255,259,5,3,0,0,256,258,5,45,0,0,257,256,1,0,
        0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,264,1,0,
        0,0,261,259,1,0,0,0,262,265,5,44,0,0,263,265,3,102,51,0,264,262,
        1,0,0,0,264,263,1,0,0,0,265,288,1,0,0,0,266,269,5,44,0,0,267,269,
        3,102,51,0,268,266,1,0,0,0,268,267,1,0,0,0,269,273,1,0,0,0,270,272,
        5,45,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
        1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,280,5,3,0,0,277,279,
        5,45,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,285,1,0,0,0,282,280,1,0,0,0,283,286,3,34,17,0,284,286,
        3,106,53,0,285,283,1,0,0,0,285,284,1,0,0,0,286,288,1,0,0,0,287,247,
        1,0,0,0,287,268,1,0,0,0,288,15,1,0,0,0,289,292,3,32,16,0,290,292,
        3,104,52,0,291,289,1,0,0,0,291,290,1,0,0,0,292,296,1,0,0,0,293,295,
        5,45,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,
        1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,303,5,3,0,0,300,302,
        5,45,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,
        1,0,0,0,304,308,1,0,0,0,305,303,1,0,0,0,306,309,3,32,16,0,307,309,
        3,104,52,0,308,306,1,0,0,0,308,307,1,0,0,0,309,17,1,0,0,0,310,313,
        3,32,16,0,311,313,3,104,52,0,312,310,1,0,0,0,312,311,1,0,0,0,313,
        317,1,0,0,0,314,316,5,45,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,
        315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,
        324,5,1,0,0,321,323,5,45,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,
        322,1,0,0,0,324,325,1,0,0,0,325,329,1,0,0,0,326,324,1,0,0,0,327,
        330,3,32,16,0,328,330,3,104,52,0,329,327,1,0,0,0,329,328,1,0,0,0,
        330,19,1,0,0,0,331,334,3,32,16,0,332,334,3,104,52,0,333,331,1,0,
        0,0,333,332,1,0,0,0,334,338,1,0,0,0,335,337,5,45,0,0,336,335,1,0,
        0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,
        0,0,340,338,1,0,0,0,341,345,5,3,0,0,342,344,5,45,0,0,343,342,1,0,
        0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,350,1,0,
        0,0,347,345,1,0,0,0,348,351,5,44,0,0,349,351,3,102,51,0,350,348,
        1,0,0,0,350,349,1,0,0,0,351,374,1,0,0,0,352,355,5,44,0,0,353,355,
        3,102,51,0,354,352,1,0,0,0,354,353,1,0,0,0,355,359,1,0,0,0,356,358,
        5,45,0,0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,
        1,0,0,0,360,362,1,0,0,0,361,359,1,0,0,0,362,366,5,3,0,0,363,365,
        5,45,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,
        1,0,0,0,367,371,1,0,0,0,368,366,1,0,0,0,369,372,3,32,16,0,370,372,
        3,104,52,0,371,369,1,0,0,0,371,370,1,0,0,0,372,374,1,0,0,0,373,333,
        1,0,0,0,373,354,1,0,0,0,374,21,1,0,0,0,375,376,5,20,0,0,376,377,
        5,30,0,0,377,378,3,52,26,0,378,379,5,31,0,0,379,23,1,0,0,0,380,381,
        5,21,0,0,381,382,5,30,0,0,382,383,3,52,26,0,383,384,5,31,0,0,384,
        25,1,0,0,0,385,386,5,23,0,0,386,387,5,30,0,0,387,388,3,52,26,0,388,
        389,5,31,0,0,389,27,1,0,0,0,390,391,5,24,0,0,391,392,5,30,0,0,392,
        393,3,52,26,0,393,394,5,15,0,0,394,395,5,44,0,0,395,396,5,31,0,0,
        396,29,1,0,0,0,397,398,5,22,0,0,398,399,5,30,0,0,399,400,3,52,26,
        0,400,401,5,31,0,0,401,31,1,0,0,0,402,403,5,34,0,0,403,414,5,44,
        0,0,404,408,5,15,0,0,405,407,5,45,0,0,406,405,1,0,0,0,407,410,1,
        0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,
        0,0,0,411,413,5,44,0,0,412,404,1,0,0,0,413,416,1,0,0,0,414,412,1,
        0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,
        35,0,0,418,33,1,0,0,0,419,420,5,34,0,0,420,431,3,32,16,0,421,425,
        5,15,0,0,422,424,5,45,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,
        1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,430,
        3,32,16,0,429,421,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,
        1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,435,5,35,0,0,435,35,
        1,0,0,0,436,439,3,22,11,0,437,439,3,24,12,0,438,436,1,0,0,0,438,
        437,1,0,0,0,439,37,1,0,0,0,440,445,3,2,1,0,441,445,3,4,2,0,442,445,
        3,6,3,0,443,445,3,8,4,0,444,440,1,0,0,0,444,441,1,0,0,0,444,442,
        1,0,0,0,444,443,1,0,0,0,445,39,1,0,0,0,446,450,3,16,8,0,447,450,
        3,18,9,0,448,450,3,20,10,0,449,446,1,0,0,0,449,447,1,0,0,0,449,448,
        1,0,0,0,450,41,1,0,0,0,451,455,3,10,5,0,452,455,3,12,6,0,453,455,
        3,14,7,0,454,451,1,0,0,0,454,452,1,0,0,0,454,453,1,0,0,0,455,43,
        1,0,0,0,456,460,3,38,19,0,457,460,3,102,51,0,458,460,5,44,0,0,459,
        456,1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,45,1,0,0,0,461,465,
        3,40,20,0,462,465,3,104,52,0,463,465,3,32,16,0,464,461,1,0,0,0,464,
        462,1,0,0,0,464,463,1,0,0,0,465,47,1,0,0,0,466,470,3,42,21,0,467,
        470,3,106,53,0,468,470,3,34,17,0,469,466,1,0,0,0,469,467,1,0,0,0,
        469,468,1,0,0,0,470,49,1,0,0,0,471,479,3,36,18,0,472,479,3,26,13,
        0,473,479,3,30,15,0,474,479,3,54,27,0,475,479,3,56,28,0,476,479,
        3,58,29,0,477,479,3,60,30,0,478,471,1,0,0,0,478,472,1,0,0,0,478,
        473,1,0,0,0,478,474,1,0,0,0,478,475,1,0,0,0,478,476,1,0,0,0,478,
        477,1,0,0,0,479,51,1,0,0,0,480,485,3,50,25,0,481,485,3,44,22,0,482,
        485,3,46,23,0,483,485,3,48,24,0,484,480,1,0,0,0,484,481,1,0,0,0,
        484,482,1,0,0,0,484,483,1,0,0,0,485,53,1,0,0,0,486,487,5,16,0,0,
        487,488,5,30,0,0,488,489,3,52,26,0,489,490,5,31,0,0,490,55,1,0,0,
        0,491,492,5,17,0,0,492,493,5,30,0,0,493,494,3,52,26,0,494,495,5,
        31,0,0,495,57,1,0,0,0,496,497,5,18,0,0,497,498,5,30,0,0,498,499,
        3,52,26,0,499,500,5,31,0,0,500,59,1,0,0,0,501,502,5,19,0,0,502,503,
        5,30,0,0,503,504,3,52,26,0,504,505,5,31,0,0,505,61,1,0,0,0,506,507,
        5,27,0,0,507,508,5,30,0,0,508,509,3,52,26,0,509,510,5,31,0,0,510,
        63,1,0,0,0,511,512,5,28,0,0,512,513,5,30,0,0,513,514,3,52,26,0,514,
        515,5,31,0,0,515,65,1,0,0,0,516,517,5,29,0,0,517,518,5,30,0,0,518,
        519,3,52,26,0,519,520,5,31,0,0,520,67,1,0,0,0,521,522,5,25,0,0,522,
        523,5,30,0,0,523,524,3,52,26,0,524,525,5,31,0,0,525,69,1,0,0,0,526,
        527,5,26,0,0,527,528,5,30,0,0,528,529,3,52,26,0,529,530,5,31,0,0,
        530,71,1,0,0,0,531,532,3,52,26,0,532,533,5,14,0,0,533,73,1,0,0,0,
        534,538,3,76,38,0,535,537,5,45,0,0,536,535,1,0,0,0,537,540,1,0,0,
        0,538,536,1,0,0,0,538,539,1,0,0,0,539,551,1,0,0,0,540,538,1,0,0,
        0,541,545,5,15,0,0,542,544,5,45,0,0,543,542,1,0,0,0,544,547,1,0,
        0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,545,1,0,
        0,0,548,550,3,76,38,0,549,541,1,0,0,0,550,553,1,0,0,0,551,549,1,
        0,0,0,551,552,1,0,0,0,552,556,1,0,0,0,553,551,1,0,0,0,554,556,3,
        78,39,0,555,534,1,0,0,0,555,554,1,0,0,0,556,75,1,0,0,0,557,563,3,
        100,50,0,558,559,3,100,50,0,559,560,5,13,0,0,560,561,3,52,26,0,561,
        563,1,0,0,0,562,557,1,0,0,0,562,558,1,0,0,0,563,77,1,0,0,0,564,565,
        1,0,0,0,565,79,1,0,0,0,566,571,3,82,41,0,567,568,3,82,41,0,568,569,
        3,80,40,0,569,571,1,0,0,0,570,566,1,0,0,0,570,567,1,0,0,0,571,81,
        1,0,0,0,572,574,5,45,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,
        1,0,0,0,575,576,1,0,0,0,576,584,1,0,0,0,577,575,1,0,0,0,578,585,
        3,84,42,0,579,585,3,52,26,0,580,585,3,88,44,0,581,585,3,92,46,0,
        582,585,3,94,47,0,583,585,3,86,43,0,584,578,1,0,0,0,584,579,1,0,
        0,0,584,580,1,0,0,0,584,581,1,0,0,0,584,582,1,0,0,0,584,583,1,0,
        0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,46,0,0,587,83,1,0,
        0,0,588,592,3,102,51,0,589,591,5,45,0,0,590,589,1,0,0,0,591,594,
        1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,592,
        1,0,0,0,595,599,5,13,0,0,596,598,5,45,0,0,597,596,1,0,0,0,598,601,
        1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,599,
        1,0,0,0,602,603,3,44,22,0,603,637,1,0,0,0,604,608,3,104,52,0,605,
        607,5,45,0,0,606,605,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,
        609,1,0,0,0,609,611,1,0,0,0,610,608,1,0,0,0,611,615,5,13,0,0,612,
        614,5,45,0,0,613,612,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,
        616,1,0,0,0,616,618,1,0,0,0,617,615,1,0,0,0,618,619,3,46,23,0,619,
        637,1,0,0,0,620,624,3,106,53,0,621,623,5,45,0,0,622,621,1,0,0,0,
        623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,
        626,624,1,0,0,0,627,631,5,13,0,0,628,630,5,45,0,0,629,628,1,0,0,
        0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,
        0,633,631,1,0,0,0,634,635,3,48,24,0,635,637,1,0,0,0,636,588,1,0,
        0,0,636,604,1,0,0,0,636,620,1,0,0,0,637,85,1,0,0,0,638,642,5,39,
        0,0,639,641,5,45,0,0,640,639,1,0,0,0,641,644,1,0,0,0,642,640,1,0,
        0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,642,1,0,0,0,645,649,5,30,
        0,0,646,648,5,45,0,0,647,646,1,0,0,0,648,651,1,0,0,0,649,647,1,0,
        0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,649,1,0,0,0,652,656,3,74,
        37,0,653,655,5,45,0,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,
        0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,656,1,0,0,0,659,663,5,
        31,0,0,660,662,5,45,0,0,661,660,1,0,0,0,662,665,1,0,0,0,663,661,
        1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,670,
        5,32,0,0,667,669,5,45,0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,
        1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,677,
        3,80,40,0,674,676,5,45,0,0,675,674,1,0,0,0,676,679,1,0,0,0,677,675,
        1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,681,
        5,33,0,0,681,87,1,0,0,0,682,686,5,40,0,0,683,685,5,45,0,0,684,683,
        1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,689,
        1,0,0,0,688,686,1,0,0,0,689,690,3,96,48,0,690,694,5,31,0,0,691,693,
        5,45,0,0,692,691,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,
        1,0,0,0,695,697,1,0,0,0,696,694,1,0,0,0,697,701,5,32,0,0,698,700,
        5,45,0,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,
        1,0,0,0,702,707,1,0,0,0,703,701,1,0,0,0,704,706,5,46,0,0,705,704,
        1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,
        1,0,0,0,709,707,1,0,0,0,710,714,3,80,40,0,711,713,5,46,0,0,712,711,
        1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,717,
        1,0,0,0,716,714,1,0,0,0,717,718,5,33,0,0,718,770,1,0,0,0,719,723,
        5,40,0,0,720,722,5,45,0,0,721,720,1,0,0,0,722,725,1,0,0,0,723,721,
        1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,0,726,727,
        3,96,48,0,727,731,5,31,0,0,728,730,5,45,0,0,729,728,1,0,0,0,730,
        733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,
        731,1,0,0,0,734,738,5,32,0,0,735,737,5,45,0,0,736,735,1,0,0,0,737,
        740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,744,1,0,0,0,740,
        738,1,0,0,0,741,743,5,46,0,0,742,741,1,0,0,0,743,746,1,0,0,0,744,
        742,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,744,1,0,0,0,747,
        751,3,80,40,0,748,750,5,45,0,0,749,748,1,0,0,0,750,753,1,0,0,0,751,
        749,1,0,0,0,751,752,1,0,0,0,752,754,1,0,0,0,753,751,1,0,0,0,754,
        758,5,33,0,0,755,757,5,45,0,0,756,755,1,0,0,0,757,760,1,0,0,0,758,
        756,1,0,0,0,758,759,1,0,0,0,759,764,1,0,0,0,760,758,1,0,0,0,761,
        763,5,46,0,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,
        765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,768,3,90,45,0,768,
        770,1,0,0,0,769,682,1,0,0,0,769,719,1,0,0,0,770,89,1,0,0,0,771,775,
        5,41,0,0,772,774,5,45,0,0,773,772,1,0,0,0,774,777,1,0,0,0,775,773,
        1,0,0,0,775,776,1,0,0,0,776,781,1,0,0,0,777,775,1,0,0,0,778,780,
        5,46,0,0,779,778,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,
        1,0,0,0,782,784,1,0,0,0,783,781,1,0,0,0,784,788,3,80,40,0,785,787,
        5,46,0,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,
        1,0,0,0,789,791,1,0,0,0,790,788,1,0,0,0,791,792,5,33,0,0,792,91,
        1,0,0,0,793,797,5,43,0,0,794,796,5,45,0,0,795,794,1,0,0,0,796,799,
        1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,799,797,
        1,0,0,0,800,804,3,84,42,0,801,803,5,45,0,0,802,801,1,0,0,0,803,806,
        1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,804,
        1,0,0,0,807,811,5,36,0,0,808,810,5,45,0,0,809,808,1,0,0,0,810,813,
        1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,
        1,0,0,0,814,818,3,96,48,0,815,817,5,45,0,0,816,815,1,0,0,0,817,820,
        1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,818,
        1,0,0,0,821,825,5,36,0,0,822,824,5,45,0,0,823,822,1,0,0,0,824,827,
        1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,
        1,0,0,0,828,832,3,84,42,0,829,831,5,45,0,0,830,829,1,0,0,0,831,834,
        1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,835,1,0,0,0,834,832,
        1,0,0,0,835,839,5,31,0,0,836,838,5,45,0,0,837,836,1,0,0,0,838,841,
        1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,839,
        1,0,0,0,842,846,5,32,0,0,843,845,5,46,0,0,844,843,1,0,0,0,845,848,
        1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,852,1,0,0,0,848,846,
        1,0,0,0,849,851,5,45,0,0,850,849,1,0,0,0,851,854,1,0,0,0,852,850,
        1,0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,854,852,1,0,0,0,855,859,
        3,80,40,0,856,858,5,45,0,0,857,856,1,0,0,0,858,861,1,0,0,0,859,857,
        1,0,0,0,859,860,1,0,0,0,860,865,1,0,0,0,861,859,1,0,0,0,862,864,
        5,46,0,0,863,862,1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,866,
        1,0,0,0,866,868,1,0,0,0,867,865,1,0,0,0,868,869,5,33,0,0,869,93,
        1,0,0,0,870,874,5,42,0,0,871,873,5,45,0,0,872,871,1,0,0,0,873,876,
        1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,874,
        1,0,0,0,877,881,3,52,26,0,878,880,5,45,0,0,879,878,1,0,0,0,880,883,
        1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,883,881,
        1,0,0,0,884,885,5,31,0,0,885,95,1,0,0,0,886,890,3,52,26,0,887,889,
        5,45,0,0,888,887,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,
        1,0,0,0,891,893,1,0,0,0,892,890,1,0,0,0,893,897,3,98,49,0,894,896,
        5,45,0,0,895,894,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,
        1,0,0,0,898,900,1,0,0,0,899,897,1,0,0,0,900,901,3,52,26,0,901,97,
        1,0,0,0,902,903,7,0,0,0,903,99,1,0,0,0,904,908,3,102,51,0,905,908,
        3,104,52,0,906,908,3,106,53,0,907,904,1,0,0,0,907,905,1,0,0,0,907,
        906,1,0,0,0,908,101,1,0,0,0,909,910,5,37,0,0,910,103,1,0,0,0,911,
        912,5,37,0,0,912,105,1,0,0,0,913,914,5,38,0,0,914,107,1,0,0,0,117,
        111,118,123,130,136,141,146,153,159,163,168,175,180,184,189,196,
        201,205,210,217,222,226,231,238,243,247,252,259,264,268,273,280,
        285,287,291,296,303,308,312,317,324,329,333,338,345,350,354,359,
        366,371,373,408,414,425,431,438,444,449,454,459,464,469,478,484,
        538,545,551,555,562,570,575,584,592,599,608,615,624,631,636,642,
        649,656,663,670,677,686,694,701,707,714,723,731,738,744,751,758,
        764,769,775,781,788,797,804,811,818,825,832,839,846,852,859,865,
        874,881,890,897,907
    ]

class GrammarParser ( Parser ):

    grammarFileName = "Grammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                     "'='", "'<>'", "'<'", "'>'", "'<='", "'>='", "':='", 
                     "'!'", "','", "'exp'", "'abs'", "'ceil'", "'floor'", 
                     "'sin'", "'cos'", "'log'", "'sqrt'", "'root'", "'sinh'", 
                     "'cosh'", "'arcsin'", "'arccos'", "'arctan'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "<INVALID>", 
                     "<INVALID>", "'func'", "'if ('", "'else {'", "'print('", 
                     "'for ('", "<INVALID>", "' '", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
                      "MOD", "POWER", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
                      "GREATER_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", 
                      "ASSIGNMENT", "FACTORIAL", "COMMA", "EXP", "ABS", 
                      "CEIL", "FLOOR", "SIN", "COS", "LOG", "SQRT", "ROOT", 
                      "SINH", "COSH", "ARCSIN", "ARCCOS", "ARCTAN", "PAR_LEFT", 
                      "PAR_RIGHT", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", 
                      "BRACKET_RIGHT", "SEMICOLON", "VEC_ID", "MAT_ID", 
                      "FUNC", "IF", "ELSE", "PRINT", "FOR", "NUMBER", "SPACE", 
                      "NEWLINE" ]

    RULE_program = 0
    RULE_addition = 1
    RULE_subtraction = 2
    RULE_multiplication = 3
    RULE_modulo_op = 4
    RULE_matmul = 5
    RULE_mat_add = 6
    RULE_mat_scalar_mult = 7
    RULE_dot_product = 8
    RULE_vec_add = 9
    RULE_vec_scalar_mult = 10
    RULE_sin = 11
    RULE_cos = 12
    RULE_sqrt = 13
    RULE_root = 14
    RULE_log = 15
    RULE_vector = 16
    RULE_matrix = 17
    RULE_trig_func = 18
    RULE_scalar_op = 19
    RULE_vector_op = 20
    RULE_matrix_op = 21
    RULE_expression_scalar = 22
    RULE_expression_vec = 23
    RULE_expression_mat = 24
    RULE_built_in_func = 25
    RULE_expression = 26
    RULE_exp_func = 27
    RULE_abs_func = 28
    RULE_ceil_func = 29
    RULE_floor_func = 30
    RULE_arcsin_func = 31
    RULE_arccos_func = 32
    RULE_arctan_func = 33
    RULE_sinh_func = 34
    RULE_cosh_func = 35
    RULE_factorial_func = 36
    RULE_params = 37
    RULE_param = 38
    RULE_empty = 39
    RULE_statements = 40
    RULE_statement = 41
    RULE_assignment_statement = 42
    RULE_func_statement = 43
    RULE_if_statement = 44
    RULE_else_statement = 45
    RULE_for_statement = 46
    RULE_print_statement = 47
    RULE_condition = 48
    RULE_logic_op = 49
    RULE_variable = 50
    RULE_variable_scalar = 51
    RULE_variable_vec = 52
    RULE_variable_mat = 53

    ruleNames =  [ "program", "addition", "subtraction", "multiplication", 
                   "modulo_op", "matmul", "mat_add", "mat_scalar_mult", 
                   "dot_product", "vec_add", "vec_scalar_mult", "sin", "cos", 
                   "sqrt", "root", "log", "vector", "matrix", "trig_func", 
                   "scalar_op", "vector_op", "matrix_op", "expression_scalar", 
                   "expression_vec", "expression_mat", "built_in_func", 
                   "expression", "exp_func", "abs_func", "ceil_func", "floor_func", 
                   "arcsin_func", "arccos_func", "arctan_func", "sinh_func", 
                   "cosh_func", "factorial_func", "params", "param", "empty", 
                   "statements", "statement", "assignment_statement", "func_statement", 
                   "if_statement", "else_statement", "for_statement", "print_statement", 
                   "condition", "logic_op", "variable", "variable_scalar", 
                   "variable_vec", "variable_mat" ]

    EOF = Token.EOF
    PLUS=1
    MINUS=2
    MULTIPLICATION=3
    DIVISION=4
    MOD=5
    POWER=6
    EQUALS=7
    NOT_EQUALS=8
    LESS_THAN=9
    GREATER_THAN=10
    LESS_THAN_EQUALS=11
    GREATER_THAN_EQUALS=12
    ASSIGNMENT=13
    FACTORIAL=14
    COMMA=15
    EXP=16
    ABS=17
    CEIL=18
    FLOOR=19
    SIN=20
    COS=21
    LOG=22
    SQRT=23
    ROOT=24
    SINH=25
    COSH=26
    ARCSIN=27
    ARCCOS=28
    ARCTAN=29
    PAR_LEFT=30
    PAR_RIGHT=31
    BRACE_LEFT=32
    BRACE_RIGHT=33
    BRACKET_LEFT=34
    BRACKET_RIGHT=35
    SEMICOLON=36
    VEC_ID=37
    MAT_ID=38
    FUNC=39
    IF=40
    ELSE=41
    PRINT=42
    FOR=43
    NUMBER=44
    SPACE=45
    NEWLINE=46

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GrammarParser.EOF, 0)

        def statements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.StatementsContext)
            else:
                return self.getTypedRuleContext(GrammarParser.StatementsContext,i)


        def getRuleIndex(self):
            return GrammarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GrammarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 109 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 108
                self.statements()
                self.state = 111 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 138418222727168) != 0)):
                    break

            self.state = 113
            self.match(GrammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def multiplication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MultiplicationContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MultiplicationContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_addition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddition" ):
                listener.enterAddition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddition" ):
                listener.exitAddition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddition" ):
                return visitor.visitAddition(self)
            else:
                return visitor.visitChildren(self)




    def addition(self):

        localctx = GrammarParser.AdditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_addition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 115
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 116
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 117
                self.multiplication()
                pass


            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 120
                self.match(GrammarParser.SPACE)
                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 126
            self.match(GrammarParser.PLUS)
            self.state = 130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 127
                self.match(GrammarParser.SPACE)
                self.state = 132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 133
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 134
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 135
                self.multiplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(GrammarParser.MINUS, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def multiplication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MultiplicationContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MultiplicationContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_subtraction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtraction" ):
                listener.enterSubtraction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtraction" ):
                listener.exitSubtraction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtraction" ):
                return visitor.visitSubtraction(self)
            else:
                return visitor.visitChildren(self)




    def subtraction(self):

        localctx = GrammarParser.SubtractionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_subtraction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 138
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 139
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 140
                self.multiplication()
                pass


            self.state = 146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 143
                self.match(GrammarParser.SPACE)
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 149
            self.match(GrammarParser.MINUS)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 150
                self.match(GrammarParser.SPACE)
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 156
                self.match(GrammarParser.NUMBER)
                pass

            elif la_ == 2:
                self.state = 157
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.state = 158
                self.multiplication()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_scalarContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_multiplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplication" ):
                listener.enterMultiplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplication" ):
                listener.exitMultiplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplication" ):
                return visitor.visitMultiplication(self)
            else:
                return visitor.visitChildren(self)




    def multiplication(self):

        localctx = GrammarParser.MultiplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_multiplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 161
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37]:
                self.state = 162
                self.variable_scalar()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 165
                self.match(GrammarParser.SPACE)
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 172
                self.match(GrammarParser.SPACE)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 178
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37]:
                self.state = 179
                self.variable_scalar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modulo_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(GrammarParser.MOD, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VariableContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_modulo_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo_op" ):
                listener.enterModulo_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo_op" ):
                listener.exitModulo_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModulo_op" ):
                return visitor.visitModulo_op(self)
            else:
                return visitor.visitChildren(self)




    def modulo_op(self):

        localctx = GrammarParser.Modulo_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modulo_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 182
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37, 38]:
                self.state = 183
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 186
                self.match(GrammarParser.SPACE)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 192
            self.match(GrammarParser.MOD)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 193
                self.match(GrammarParser.SPACE)
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 199
                self.match(GrammarParser.NUMBER)
                pass
            elif token in [37, 38]:
                self.state = 200
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatmulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def matrix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MatrixContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MatrixContext,i)


        def variable_mat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_matContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_matContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_matmul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatmul" ):
                listener.enterMatmul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatmul" ):
                listener.exitMatmul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatmul" ):
                return visitor.visitMatmul(self)
            else:
                return visitor.visitChildren(self)




    def matmul(self):

        localctx = GrammarParser.MatmulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_matmul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 203
                self.matrix()
                pass
            elif token in [38]:
                self.state = 204
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 207
                self.match(GrammarParser.SPACE)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 214
                self.match(GrammarParser.SPACE)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 220
                self.matrix()
                pass
            elif token in [38]:
                self.state = 221
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mat_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def matrix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.MatrixContext)
            else:
                return self.getTypedRuleContext(GrammarParser.MatrixContext,i)


        def variable_mat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_matContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_matContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_mat_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMat_add" ):
                listener.enterMat_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMat_add" ):
                listener.exitMat_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMat_add" ):
                return visitor.visitMat_add(self)
            else:
                return visitor.visitChildren(self)




    def mat_add(self):

        localctx = GrammarParser.Mat_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_mat_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 224
                self.matrix()
                pass
            elif token in [38]:
                self.state = 225
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 228
                self.match(GrammarParser.SPACE)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(GrammarParser.PLUS)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 235
                self.match(GrammarParser.SPACE)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 241
                self.matrix()
                pass
            elif token in [38]:
                self.state = 242
                self.variable_mat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mat_scalar_multContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def matrix(self):
            return self.getTypedRuleContext(GrammarParser.MatrixContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_mat_scalar_mult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMat_scalar_mult" ):
                listener.enterMat_scalar_mult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMat_scalar_mult" ):
                listener.exitMat_scalar_mult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMat_scalar_mult" ):
                return visitor.visitMat_scalar_mult(self)
            else:
                return visitor.visitChildren(self)




    def mat_scalar_mult(self):

        localctx = GrammarParser.Mat_scalar_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_mat_scalar_mult)
        self._la = 0 # Token type
        try:
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 245
                    self.matrix()
                    pass
                elif token in [38]:
                    self.state = 246
                    self.variable_mat()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 249
                    self.match(GrammarParser.SPACE)
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 256
                    self.match(GrammarParser.SPACE)
                    self.state = 261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 262
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 263
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [37, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 266
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 267
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 270
                    self.match(GrammarParser.SPACE)
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 277
                    self.match(GrammarParser.SPACE)
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 285
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 283
                    self.matrix()
                    pass
                elif token in [38]:
                    self.state = 284
                    self.variable_mat()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def variable_vec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_vecContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_vecContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_dot_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_product" ):
                listener.enterDot_product(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_product" ):
                listener.exitDot_product(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot_product" ):
                return visitor.visitDot_product(self)
            else:
                return visitor.visitChildren(self)




    def dot_product(self):

        localctx = GrammarParser.Dot_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_dot_product)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 289
                self.vector()
                pass
            elif token in [37]:
                self.state = 290
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 293
                self.match(GrammarParser.SPACE)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self.match(GrammarParser.MULTIPLICATION)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 300
                self.match(GrammarParser.SPACE)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 306
                self.vector()
                pass
            elif token in [37]:
                self.state = 307
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vec_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GrammarParser.PLUS, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def variable_vec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Variable_vecContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Variable_vecContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vec_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVec_add" ):
                listener.enterVec_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVec_add" ):
                listener.exitVec_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVec_add" ):
                return visitor.visitVec_add(self)
            else:
                return visitor.visitChildren(self)




    def vec_add(self):

        localctx = GrammarParser.Vec_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_vec_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 310
                self.vector()
                pass
            elif token in [37]:
                self.state = 311
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 314
                self.match(GrammarParser.SPACE)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 320
            self.match(GrammarParser.PLUS)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 321
                self.match(GrammarParser.SPACE)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 327
                self.vector()
                pass
            elif token in [37]:
                self.state = 328
                self.variable_vec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vec_scalar_multContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLICATION(self):
            return self.getToken(GrammarParser.MULTIPLICATION, 0)

        def vector(self):
            return self.getTypedRuleContext(GrammarParser.VectorContext,0)


        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vec_scalar_mult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVec_scalar_mult" ):
                listener.enterVec_scalar_mult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVec_scalar_mult" ):
                listener.exitVec_scalar_mult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVec_scalar_mult" ):
                return visitor.visitVec_scalar_mult(self)
            else:
                return visitor.visitChildren(self)




    def vec_scalar_mult(self):

        localctx = GrammarParser.Vec_scalar_multContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_vec_scalar_mult)
        self._la = 0 # Token type
        try:
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 331
                    self.vector()
                    pass
                elif token in [37]:
                    self.state = 332
                    self.variable_vec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 335
                    self.match(GrammarParser.SPACE)
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 341
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 342
                    self.match(GrammarParser.SPACE)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 348
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 349
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 352
                    self.match(GrammarParser.NUMBER)
                    pass
                elif token in [37]:
                    self.state = 353
                    self.variable_scalar()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 356
                    self.match(GrammarParser.SPACE)
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 362
                self.match(GrammarParser.MULTIPLICATION)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 363
                    self.match(GrammarParser.SPACE)
                    self.state = 368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 371
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 369
                    self.vector()
                    pass
                elif token in [37]:
                    self.state = 370
                    self.variable_vec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIN(self):
            return self.getToken(GrammarParser.SIN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSin" ):
                listener.enterSin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSin" ):
                listener.exitSin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSin" ):
                return visitor.visitSin(self)
            else:
                return visitor.visitChildren(self)




    def sin(self):

        localctx = GrammarParser.SinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_sin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(GrammarParser.SIN)
            self.state = 376
            self.match(GrammarParser.PAR_LEFT)
            self.state = 377
            self.expression()
            self.state = 378
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COS(self):
            return self.getToken(GrammarParser.COS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_cos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCos" ):
                listener.enterCos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCos" ):
                listener.exitCos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCos" ):
                return visitor.visitCos(self)
            else:
                return visitor.visitChildren(self)




    def cos(self):

        localctx = GrammarParser.CosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_cos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(GrammarParser.COS)
            self.state = 381
            self.match(GrammarParser.PAR_LEFT)
            self.state = 382
            self.expression()
            self.state = 383
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqrtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQRT(self):
            return self.getToken(GrammarParser.SQRT, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sqrt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqrt" ):
                listener.enterSqrt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqrt" ):
                listener.exitSqrt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqrt" ):
                return visitor.visitSqrt(self)
            else:
                return visitor.visitChildren(self)




    def sqrt(self):

        localctx = GrammarParser.SqrtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sqrt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(GrammarParser.SQRT)
            self.state = 386
            self.match(GrammarParser.PAR_LEFT)
            self.state = 387
            self.expression()
            self.state = 388
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT(self):
            return self.getToken(GrammarParser.ROOT, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(GrammarParser.COMMA, 0)

        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = GrammarParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(GrammarParser.ROOT)
            self.state = 391
            self.match(GrammarParser.PAR_LEFT)
            self.state = 392
            self.expression()
            self.state = 393
            self.match(GrammarParser.COMMA)
            self.state = 394
            self.match(GrammarParser.NUMBER)
            self.state = 395
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(GrammarParser.LOG, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog" ):
                listener.enterLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog" ):
                listener.exitLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog" ):
                return visitor.visitLog(self)
            else:
                return visitor.visitChildren(self)




    def log(self):

        localctx = GrammarParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(GrammarParser.LOG)
            self.state = 398
            self.match(GrammarParser.PAR_LEFT)
            self.state = 399
            self.expression()
            self.state = 400
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(GrammarParser.BRACKET_LEFT, 0)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NUMBER)
            else:
                return self.getToken(GrammarParser.NUMBER, i)

        def BRACKET_RIGHT(self):
            return self.getToken(GrammarParser.BRACKET_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector" ):
                return visitor.visitVector(self)
            else:
                return visitor.visitChildren(self)




    def vector(self):

        localctx = GrammarParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(GrammarParser.BRACKET_LEFT)
            self.state = 403
            self.match(GrammarParser.NUMBER)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 404
                self.match(GrammarParser.COMMA)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 405
                    self.match(GrammarParser.SPACE)
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 411
                self.match(GrammarParser.NUMBER)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(GrammarParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRACKET_LEFT(self):
            return self.getToken(GrammarParser.BRACKET_LEFT, 0)

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(GrammarParser.VectorContext,i)


        def BRACKET_RIGHT(self):
            return self.getToken(GrammarParser.BRACKET_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrix" ):
                return visitor.visitMatrix(self)
            else:
                return visitor.visitChildren(self)




    def matrix(self):

        localctx = GrammarParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(GrammarParser.BRACKET_LEFT)
            self.state = 420
            self.vector()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 421
                self.match(GrammarParser.COMMA)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 422
                    self.match(GrammarParser.SPACE)
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 428
                self.vector()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 434
            self.match(GrammarParser.BRACKET_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trig_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sin(self):
            return self.getTypedRuleContext(GrammarParser.SinContext,0)


        def cos(self):
            return self.getTypedRuleContext(GrammarParser.CosContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_trig_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrig_func" ):
                listener.enterTrig_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrig_func" ):
                listener.exitTrig_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrig_func" ):
                return visitor.visitTrig_func(self)
            else:
                return visitor.visitChildren(self)




    def trig_func(self):

        localctx = GrammarParser.Trig_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_trig_func)
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.sin()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.cos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addition(self):
            return self.getTypedRuleContext(GrammarParser.AdditionContext,0)


        def subtraction(self):
            return self.getTypedRuleContext(GrammarParser.SubtractionContext,0)


        def multiplication(self):
            return self.getTypedRuleContext(GrammarParser.MultiplicationContext,0)


        def modulo_op(self):
            return self.getTypedRuleContext(GrammarParser.Modulo_opContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_scalar_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_op" ):
                listener.enterScalar_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_op" ):
                listener.exitScalar_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_op" ):
                return visitor.visitScalar_op(self)
            else:
                return visitor.visitChildren(self)




    def scalar_op(self):

        localctx = GrammarParser.Scalar_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_scalar_op)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.addition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.subtraction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.multiplication()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.modulo_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_product(self):
            return self.getTypedRuleContext(GrammarParser.Dot_productContext,0)


        def vec_add(self):
            return self.getTypedRuleContext(GrammarParser.Vec_addContext,0)


        def vec_scalar_mult(self):
            return self.getTypedRuleContext(GrammarParser.Vec_scalar_multContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_vector_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_op" ):
                listener.enterVector_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_op" ):
                listener.exitVector_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_op" ):
                return visitor.visitVector_op(self)
            else:
                return visitor.visitChildren(self)




    def vector_op(self):

        localctx = GrammarParser.Vector_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_vector_op)
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.dot_product()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.vec_add()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.vec_scalar_mult()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matmul(self):
            return self.getTypedRuleContext(GrammarParser.MatmulContext,0)


        def mat_add(self):
            return self.getTypedRuleContext(GrammarParser.Mat_addContext,0)


        def mat_scalar_mult(self):
            return self.getTypedRuleContext(GrammarParser.Mat_scalar_multContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_matrix_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix_op" ):
                listener.enterMatrix_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix_op" ):
                listener.exitMatrix_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatrix_op" ):
                return visitor.visitMatrix_op(self)
            else:
                return visitor.visitChildren(self)




    def matrix_op(self):

        localctx = GrammarParser.Matrix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_matrix_op)
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.matmul()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.mat_add()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 453
                self.mat_scalar_mult()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_op(self):
            return self.getTypedRuleContext(GrammarParser.Scalar_opContext,0)


        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def NUMBER(self):
            return self.getToken(GrammarParser.NUMBER, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_expression_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_scalar" ):
                listener.enterExpression_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_scalar" ):
                listener.exitExpression_scalar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_scalar" ):
                return visitor.visitExpression_scalar(self)
            else:
                return visitor.visitChildren(self)




    def expression_scalar(self):

        localctx = GrammarParser.Expression_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expression_scalar)
        try:
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.scalar_op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.variable_scalar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 458
                self.match(GrammarParser.NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_vecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_op(self):
            return self.getTypedRuleContext(GrammarParser.Vector_opContext,0)


        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def vector(self):
            return self.getTypedRuleContext(GrammarParser.VectorContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_expression_vec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_vec" ):
                listener.enterExpression_vec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_vec" ):
                listener.exitExpression_vec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_vec" ):
                return visitor.visitExpression_vec(self)
            else:
                return visitor.visitChildren(self)




    def expression_vec(self):

        localctx = GrammarParser.Expression_vecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression_vec)
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.vector_op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.variable_vec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.vector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_matContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_op(self):
            return self.getTypedRuleContext(GrammarParser.Matrix_opContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def matrix(self):
            return self.getTypedRuleContext(GrammarParser.MatrixContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_expression_mat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_mat" ):
                listener.enterExpression_mat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_mat" ):
                listener.exitExpression_mat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_mat" ):
                return visitor.visitExpression_mat(self)
            else:
                return visitor.visitChildren(self)




    def expression_mat(self):

        localctx = GrammarParser.Expression_matContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expression_mat)
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.matrix_op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.variable_mat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 468
                self.matrix()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trig_func(self):
            return self.getTypedRuleContext(GrammarParser.Trig_funcContext,0)


        def sqrt(self):
            return self.getTypedRuleContext(GrammarParser.SqrtContext,0)


        def log(self):
            return self.getTypedRuleContext(GrammarParser.LogContext,0)


        def exp_func(self):
            return self.getTypedRuleContext(GrammarParser.Exp_funcContext,0)


        def abs_func(self):
            return self.getTypedRuleContext(GrammarParser.Abs_funcContext,0)


        def ceil_func(self):
            return self.getTypedRuleContext(GrammarParser.Ceil_funcContext,0)


        def floor_func(self):
            return self.getTypedRuleContext(GrammarParser.Floor_funcContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_built_in_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in_func" ):
                listener.enterBuilt_in_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in_func" ):
                listener.exitBuilt_in_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuilt_in_func" ):
                return visitor.visitBuilt_in_func(self)
            else:
                return visitor.visitChildren(self)




    def built_in_func(self):

        localctx = GrammarParser.Built_in_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_built_in_func)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.trig_func()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.sqrt()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.log()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 474
                self.exp_func()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.abs_func()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 6)
                self.state = 476
                self.ceil_func()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 7)
                self.state = 477
                self.floor_func()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def built_in_func(self):
            return self.getTypedRuleContext(GrammarParser.Built_in_funcContext,0)


        def expression_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Expression_scalarContext,0)


        def expression_vec(self):
            return self.getTypedRuleContext(GrammarParser.Expression_vecContext,0)


        def expression_mat(self):
            return self.getTypedRuleContext(GrammarParser.Expression_matContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = GrammarParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.built_in_func()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.expression_scalar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 482
                self.expression_vec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 483
                self.expression_mat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exp_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(GrammarParser.EXP, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_exp_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_func" ):
                listener.enterExp_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_func" ):
                listener.exitExp_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExp_func" ):
                return visitor.visitExp_func(self)
            else:
                return visitor.visitChildren(self)




    def exp_func(self):

        localctx = GrammarParser.Exp_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_exp_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(GrammarParser.EXP)
            self.state = 487
            self.match(GrammarParser.PAR_LEFT)
            self.state = 488
            self.expression()
            self.state = 489
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(GrammarParser.ABS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_abs_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbs_func" ):
                listener.enterAbs_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbs_func" ):
                listener.exitAbs_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbs_func" ):
                return visitor.visitAbs_func(self)
            else:
                return visitor.visitChildren(self)




    def abs_func(self):

        localctx = GrammarParser.Abs_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_abs_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(GrammarParser.ABS)
            self.state = 492
            self.match(GrammarParser.PAR_LEFT)
            self.state = 493
            self.expression()
            self.state = 494
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ceil_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CEIL(self):
            return self.getToken(GrammarParser.CEIL, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_ceil_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCeil_func" ):
                listener.enterCeil_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCeil_func" ):
                listener.exitCeil_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCeil_func" ):
                return visitor.visitCeil_func(self)
            else:
                return visitor.visitChildren(self)




    def ceil_func(self):

        localctx = GrammarParser.Ceil_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ceil_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(GrammarParser.CEIL)
            self.state = 497
            self.match(GrammarParser.PAR_LEFT)
            self.state = 498
            self.expression()
            self.state = 499
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floor_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOOR(self):
            return self.getToken(GrammarParser.FLOOR, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_floor_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloor_func" ):
                listener.enterFloor_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloor_func" ):
                listener.exitFloor_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloor_func" ):
                return visitor.visitFloor_func(self)
            else:
                return visitor.visitChildren(self)




    def floor_func(self):

        localctx = GrammarParser.Floor_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_floor_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(GrammarParser.FLOOR)
            self.state = 502
            self.match(GrammarParser.PAR_LEFT)
            self.state = 503
            self.expression()
            self.state = 504
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arcsin_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCSIN(self):
            return self.getToken(GrammarParser.ARCSIN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arcsin_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcsin_func" ):
                listener.enterArcsin_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcsin_func" ):
                listener.exitArcsin_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArcsin_func" ):
                return visitor.visitArcsin_func(self)
            else:
                return visitor.visitChildren(self)




    def arcsin_func(self):

        localctx = GrammarParser.Arcsin_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arcsin_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(GrammarParser.ARCSIN)
            self.state = 507
            self.match(GrammarParser.PAR_LEFT)
            self.state = 508
            self.expression()
            self.state = 509
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arccos_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCCOS(self):
            return self.getToken(GrammarParser.ARCCOS, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arccos_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArccos_func" ):
                listener.enterArccos_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArccos_func" ):
                listener.exitArccos_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArccos_func" ):
                return visitor.visitArccos_func(self)
            else:
                return visitor.visitChildren(self)




    def arccos_func(self):

        localctx = GrammarParser.Arccos_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arccos_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(GrammarParser.ARCCOS)
            self.state = 512
            self.match(GrammarParser.PAR_LEFT)
            self.state = 513
            self.expression()
            self.state = 514
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arctan_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCTAN(self):
            return self.getToken(GrammarParser.ARCTAN, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_arctan_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArctan_func" ):
                listener.enterArctan_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArctan_func" ):
                listener.exitArctan_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArctan_func" ):
                return visitor.visitArctan_func(self)
            else:
                return visitor.visitChildren(self)




    def arctan_func(self):

        localctx = GrammarParser.Arctan_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arctan_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(GrammarParser.ARCTAN)
            self.state = 517
            self.match(GrammarParser.PAR_LEFT)
            self.state = 518
            self.expression()
            self.state = 519
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sinh_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINH(self):
            return self.getToken(GrammarParser.SINH, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_sinh_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSinh_func" ):
                listener.enterSinh_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSinh_func" ):
                listener.exitSinh_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSinh_func" ):
                return visitor.visitSinh_func(self)
            else:
                return visitor.visitChildren(self)




    def sinh_func(self):

        localctx = GrammarParser.Sinh_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sinh_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(GrammarParser.SINH)
            self.state = 522
            self.match(GrammarParser.PAR_LEFT)
            self.state = 523
            self.expression()
            self.state = 524
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cosh_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COSH(self):
            return self.getToken(GrammarParser.COSH, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_cosh_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCosh_func" ):
                listener.enterCosh_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCosh_func" ):
                listener.exitCosh_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCosh_func" ):
                return visitor.visitCosh_func(self)
            else:
                return visitor.visitChildren(self)




    def cosh_func(self):

        localctx = GrammarParser.Cosh_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_cosh_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(GrammarParser.COSH)
            self.state = 527
            self.match(GrammarParser.PAR_LEFT)
            self.state = 528
            self.expression()
            self.state = 529
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factorial_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def FACTORIAL(self):
            return self.getToken(GrammarParser.FACTORIAL, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_factorial_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactorial_func" ):
                listener.enterFactorial_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactorial_func" ):
                listener.exitFactorial_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactorial_func" ):
                return visitor.visitFactorial_func(self)
            else:
                return visitor.visitChildren(self)




    def factorial_func(self):

        localctx = GrammarParser.Factorial_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factorial_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.expression()
            self.state = 532
            self.match(GrammarParser.FACTORIAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ParamContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ParamContext,i)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.COMMA)
            else:
                return self.getToken(GrammarParser.COMMA, i)

        def empty(self):
            return self.getTypedRuleContext(GrammarParser.EmptyContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = GrammarParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_params)
        self._la = 0 # Token type
        try:
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.param()
                self.state = 538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 535
                        self.match(GrammarParser.SPACE) 
                    self.state = 540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 541
                    self.match(GrammarParser.COMMA)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==45:
                        self.state = 542
                        self.match(GrammarParser.SPACE)
                        self.state = 547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 548
                    self.param()
                    self.state = 553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [31, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.empty()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(GrammarParser.VariableContext,0)


        def ASSIGNMENT(self):
            return self.getToken(GrammarParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = GrammarParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_param)
        try:
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.variable()
                self.state = 559
                self.match(GrammarParser.ASSIGNMENT)
                self.state = 560
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GrammarParser.RULE_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty" ):
                listener.enterEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty" ):
                listener.exitEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty" ):
                return visitor.visitEmpty(self)
            else:
                return visitor.visitChildren(self)




    def empty(self):

        localctx = GrammarParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_empty)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(GrammarParser.StatementContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = GrammarParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_statements)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.statement()
                self.state = 568
                self.statements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(GrammarParser.NEWLINE, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def assignment_statement(self):
            return self.getTypedRuleContext(GrammarParser.Assignment_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(GrammarParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(GrammarParser.For_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(GrammarParser.Print_statementContext,0)


        def func_statement(self):
            return self.getTypedRuleContext(GrammarParser.Func_statementContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = GrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 572
                self.match(GrammarParser.SPACE)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 578
                self.assignment_statement()

            elif la_ == 2:
                self.state = 579
                self.expression()

            elif la_ == 3:
                self.state = 580
                self.if_statement()

            elif la_ == 4:
                self.state = 581
                self.for_statement()

            elif la_ == 5:
                self.state = 582
                self.print_statement()

            elif la_ == 6:
                self.state = 583
                self.func_statement()


            self.state = 586
            self.match(GrammarParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def ASSIGNMENT(self):
            return self.getToken(GrammarParser.ASSIGNMENT, 0)

        def expression_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Expression_scalarContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def expression_vec(self):
            return self.getTypedRuleContext(GrammarParser.Expression_vecContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def expression_mat(self):
            return self.getTypedRuleContext(GrammarParser.Expression_matContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = GrammarParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignment_statement)
        self._la = 0 # Token type
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.variable_scalar()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 589
                    self.match(GrammarParser.SPACE)
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 595
                self.match(GrammarParser.ASSIGNMENT)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 596
                    self.match(GrammarParser.SPACE)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 602
                self.expression_scalar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.variable_vec()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 605
                    self.match(GrammarParser.SPACE)
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 611
                self.match(GrammarParser.ASSIGNMENT)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 612
                    self.match(GrammarParser.SPACE)
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 618
                self.expression_vec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.variable_mat()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 621
                    self.match(GrammarParser.SPACE)
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 627
                self.match(GrammarParser.ASSIGNMENT)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 628
                    self.match(GrammarParser.SPACE)
                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 634
                self.expression_mat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GrammarParser.FUNC, 0)

        def PAR_LEFT(self):
            return self.getToken(GrammarParser.PAR_LEFT, 0)

        def params(self):
            return self.getTypedRuleContext(GrammarParser.ParamsContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_func_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_statement" ):
                listener.enterFunc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_statement" ):
                listener.exitFunc_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_statement" ):
                return visitor.visitFunc_statement(self)
            else:
                return visitor.visitChildren(self)




    def func_statement(self):

        localctx = GrammarParser.Func_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_func_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(GrammarParser.FUNC)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 639
                self.match(GrammarParser.SPACE)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 645
            self.match(GrammarParser.PAR_LEFT)
            self.state = 649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 646
                    self.match(GrammarParser.SPACE) 
                self.state = 651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 652
            self.params()
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 653
                self.match(GrammarParser.SPACE)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self.match(GrammarParser.PAR_RIGHT)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 660
                self.match(GrammarParser.SPACE)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 666
            self.match(GrammarParser.BRACE_LEFT)
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 667
                    self.match(GrammarParser.SPACE) 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 673
            self.statements()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 674
                self.match(GrammarParser.SPACE)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 680
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cond = None # ConditionContext
            self.if_body = None # StatementsContext
            self.else_body = None # Else_statementContext

        def IF(self):
            return self.getToken(GrammarParser.IF, 0)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def condition(self):
            return self.getTypedRuleContext(GrammarParser.ConditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def else_statement(self):
            return self.getTypedRuleContext(GrammarParser.Else_statementContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = GrammarParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.match(GrammarParser.IF)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 683
                    self.match(GrammarParser.SPACE)
                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 689
                localctx.cond = self.condition()
                self.state = 690
                self.match(GrammarParser.PAR_RIGHT)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 691
                    self.match(GrammarParser.SPACE)
                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 697
                self.match(GrammarParser.BRACE_LEFT)
                self.state = 701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 698
                        self.match(GrammarParser.SPACE) 
                    self.state = 703
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 704
                        self.match(GrammarParser.NEWLINE) 
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                self.state = 710
                localctx.if_body = self.statements()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==46:
                    self.state = 711
                    self.match(GrammarParser.NEWLINE)
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 717
                self.match(GrammarParser.BRACE_RIGHT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.match(GrammarParser.IF)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 720
                    self.match(GrammarParser.SPACE)
                    self.state = 725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 726
                localctx.cond = self.condition()
                self.state = 727
                self.match(GrammarParser.PAR_RIGHT)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 728
                    self.match(GrammarParser.SPACE)
                    self.state = 733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 734
                self.match(GrammarParser.BRACE_LEFT)
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 735
                        self.match(GrammarParser.SPACE) 
                    self.state = 740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 741
                        self.match(GrammarParser.NEWLINE) 
                    self.state = 746
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 747
                localctx.if_body = self.statements()
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 748
                    self.match(GrammarParser.SPACE)
                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 754
                self.match(GrammarParser.BRACE_RIGHT)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 755
                    self.match(GrammarParser.SPACE)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==46:
                    self.state = 761
                    self.match(GrammarParser.NEWLINE)
                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                localctx.else_body = self.else_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementsContext

        def ELSE(self):
            return self.getToken(GrammarParser.ELSE, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_else_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_statement" ):
                listener.enterElse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_statement" ):
                listener.exitElse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)




    def else_statement(self):

        localctx = GrammarParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(GrammarParser.ELSE)
            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 772
                    self.match(GrammarParser.SPACE) 
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 778
                    self.match(GrammarParser.NEWLINE) 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 784
            localctx.body = self.statements()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 785
                self.match(GrammarParser.NEWLINE)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.init = None # Assignment_statementContext
            self.cond = None # ConditionContext
            self.update = None # Assignment_statementContext
            self.body = None # StatementsContext

        def FOR(self):
            return self.getToken(GrammarParser.FOR, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SEMICOLON)
            else:
                return self.getToken(GrammarParser.SEMICOLON, i)

        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def BRACE_LEFT(self):
            return self.getToken(GrammarParser.BRACE_LEFT, 0)

        def BRACE_RIGHT(self):
            return self.getToken(GrammarParser.BRACE_RIGHT, 0)

        def assignment_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.Assignment_statementContext)
            else:
                return self.getTypedRuleContext(GrammarParser.Assignment_statementContext,i)


        def condition(self):
            return self.getTypedRuleContext(GrammarParser.ConditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(GrammarParser.StatementsContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.NEWLINE)
            else:
                return self.getToken(GrammarParser.NEWLINE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_statement(self):

        localctx = GrammarParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(GrammarParser.FOR)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 794
                self.match(GrammarParser.SPACE)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 800
            localctx.init = self.assignment_statement()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 801
                self.match(GrammarParser.SPACE)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 807
            self.match(GrammarParser.SEMICOLON)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 808
                self.match(GrammarParser.SPACE)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 814
            localctx.cond = self.condition()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 815
                self.match(GrammarParser.SPACE)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(GrammarParser.SEMICOLON)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 822
                self.match(GrammarParser.SPACE)
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 828
            localctx.update = self.assignment_statement()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 829
                self.match(GrammarParser.SPACE)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 835
            self.match(GrammarParser.PAR_RIGHT)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 836
                self.match(GrammarParser.SPACE)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 842
            self.match(GrammarParser.BRACE_LEFT)
            self.state = 846
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 843
                    self.match(GrammarParser.NEWLINE) 
                self.state = 848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 849
                    self.match(GrammarParser.SPACE) 
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 855
            localctx.body = self.statements()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 856
                self.match(GrammarParser.SPACE)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==46:
                self.state = 862
                self.match(GrammarParser.NEWLINE)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 868
            self.match(GrammarParser.BRACE_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(GrammarParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(GrammarParser.ExpressionContext,0)


        def PAR_RIGHT(self):
            return self.getToken(GrammarParser.PAR_RIGHT, 0)

        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_print_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)




    def print_statement(self):

        localctx = GrammarParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_print_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(GrammarParser.PRINT)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 871
                self.match(GrammarParser.SPACE)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 877
            self.expression()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 878
                self.match(GrammarParser.SPACE)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 884
            self.match(GrammarParser.PAR_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # ExpressionContext
            self.op = None # Logic_opContext
            self.right = None # ExpressionContext

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GrammarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GrammarParser.ExpressionContext,i)


        def logic_op(self):
            return self.getTypedRuleContext(GrammarParser.Logic_opContext,0)


        def SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(GrammarParser.SPACE)
            else:
                return self.getToken(GrammarParser.SPACE, i)

        def getRuleIndex(self):
            return GrammarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = GrammarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            localctx.left = self.expression()
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 887
                self.match(GrammarParser.SPACE)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            localctx.op = self.logic_op()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 894
                self.match(GrammarParser.SPACE)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            localctx.right = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logic_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(GrammarParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(GrammarParser.NOT_EQUALS, 0)

        def LESS_THAN(self):
            return self.getToken(GrammarParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(GrammarParser.GREATER_THAN, 0)

        def LESS_THAN_EQUALS(self):
            return self.getToken(GrammarParser.LESS_THAN_EQUALS, 0)

        def GREATER_THAN_EQUALS(self):
            return self.getToken(GrammarParser.GREATER_THAN_EQUALS, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_logic_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic_op" ):
                listener.enterLogic_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic_op" ):
                listener.exitLogic_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic_op" ):
                return visitor.visitLogic_op(self)
            else:
                return visitor.visitChildren(self)




    def logic_op(self):

        localctx = GrammarParser.Logic_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_logic_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_scalar(self):
            return self.getTypedRuleContext(GrammarParser.Variable_scalarContext,0)


        def variable_vec(self):
            return self.getTypedRuleContext(GrammarParser.Variable_vecContext,0)


        def variable_mat(self):
            return self.getTypedRuleContext(GrammarParser.Variable_matContext,0)


        def getRuleIndex(self):
            return GrammarParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = GrammarParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_variable)
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.variable_scalar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.variable_vec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 906
                self.variable_mat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VEC_ID(self):
            return self.getToken(GrammarParser.VEC_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_scalar" ):
                listener.enterVariable_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_scalar" ):
                listener.exitVariable_scalar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_scalar" ):
                return visitor.visitVariable_scalar(self)
            else:
                return visitor.visitChildren(self)




    def variable_scalar(self):

        localctx = GrammarParser.Variable_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_variable_scalar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(GrammarParser.VEC_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_vecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VEC_ID(self):
            return self.getToken(GrammarParser.VEC_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_vec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_vec" ):
                listener.enterVariable_vec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_vec" ):
                listener.exitVariable_vec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_vec" ):
                return visitor.visitVariable_vec(self)
            else:
                return visitor.visitChildren(self)




    def variable_vec(self):

        localctx = GrammarParser.Variable_vecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_variable_vec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(GrammarParser.VEC_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_matContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAT_ID(self):
            return self.getToken(GrammarParser.MAT_ID, 0)

        def getRuleIndex(self):
            return GrammarParser.RULE_variable_mat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_mat" ):
                listener.enterVariable_mat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_mat" ):
                listener.exitVariable_mat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_mat" ):
                return visitor.visitVariable_mat(self)
            else:
                return visitor.visitChildren(self)




    def variable_mat(self):

        localctx = GrammarParser.Variable_matContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_variable_mat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(GrammarParser.MAT_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





