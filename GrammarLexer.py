# Generated from Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,
        1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        5,36,214,8,36,10,36,12,36,217,9,36,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,41,1,42,1,42,3,42,244,8,42,1,42,5,42,247,8,42,10,
        42,12,42,250,9,42,1,43,1,43,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,3,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,257,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,93,1,0,
        0,0,5,95,1,0,0,0,7,97,1,0,0,0,9,99,1,0,0,0,11,101,1,0,0,0,13,103,
        1,0,0,0,15,105,1,0,0,0,17,108,1,0,0,0,19,110,1,0,0,0,21,112,1,0,
        0,0,23,115,1,0,0,0,25,118,1,0,0,0,27,121,1,0,0,0,29,123,1,0,0,0,
        31,125,1,0,0,0,33,129,1,0,0,0,35,133,1,0,0,0,37,138,1,0,0,0,39,144,
        1,0,0,0,41,148,1,0,0,0,43,152,1,0,0,0,45,156,1,0,0,0,47,161,1,0,
        0,0,49,166,1,0,0,0,51,171,1,0,0,0,53,176,1,0,0,0,55,183,1,0,0,0,
        57,190,1,0,0,0,59,197,1,0,0,0,61,199,1,0,0,0,63,201,1,0,0,0,65,203,
        1,0,0,0,67,205,1,0,0,0,69,207,1,0,0,0,71,209,1,0,0,0,73,211,1,0,
        0,0,75,218,1,0,0,0,77,223,1,0,0,0,79,226,1,0,0,0,81,231,1,0,0,0,
        83,237,1,0,0,0,85,241,1,0,0,0,87,251,1,0,0,0,89,253,1,0,0,0,91,92,
        5,43,0,0,92,2,1,0,0,0,93,94,5,45,0,0,94,4,1,0,0,0,95,96,5,42,0,0,
        96,6,1,0,0,0,97,98,5,47,0,0,98,8,1,0,0,0,99,100,5,37,0,0,100,10,
        1,0,0,0,101,102,5,94,0,0,102,12,1,0,0,0,103,104,5,61,0,0,104,14,
        1,0,0,0,105,106,5,60,0,0,106,107,5,62,0,0,107,16,1,0,0,0,108,109,
        5,60,0,0,109,18,1,0,0,0,110,111,5,62,0,0,111,20,1,0,0,0,112,113,
        5,60,0,0,113,114,5,61,0,0,114,22,1,0,0,0,115,116,5,62,0,0,116,117,
        5,61,0,0,117,24,1,0,0,0,118,119,5,58,0,0,119,120,5,61,0,0,120,26,
        1,0,0,0,121,122,5,33,0,0,122,28,1,0,0,0,123,124,5,44,0,0,124,30,
        1,0,0,0,125,126,5,101,0,0,126,127,5,120,0,0,127,128,5,112,0,0,128,
        32,1,0,0,0,129,130,5,97,0,0,130,131,5,98,0,0,131,132,5,115,0,0,132,
        34,1,0,0,0,133,134,5,99,0,0,134,135,5,101,0,0,135,136,5,105,0,0,
        136,137,5,108,0,0,137,36,1,0,0,0,138,139,5,102,0,0,139,140,5,108,
        0,0,140,141,5,111,0,0,141,142,5,111,0,0,142,143,5,114,0,0,143,38,
        1,0,0,0,144,145,5,115,0,0,145,146,5,105,0,0,146,147,5,110,0,0,147,
        40,1,0,0,0,148,149,5,99,0,0,149,150,5,111,0,0,150,151,5,115,0,0,
        151,42,1,0,0,0,152,153,5,108,0,0,153,154,5,111,0,0,154,155,5,103,
        0,0,155,44,1,0,0,0,156,157,5,115,0,0,157,158,5,113,0,0,158,159,5,
        114,0,0,159,160,5,116,0,0,160,46,1,0,0,0,161,162,5,114,0,0,162,163,
        5,111,0,0,163,164,5,111,0,0,164,165,5,116,0,0,165,48,1,0,0,0,166,
        167,5,115,0,0,167,168,5,105,0,0,168,169,5,110,0,0,169,170,5,104,
        0,0,170,50,1,0,0,0,171,172,5,99,0,0,172,173,5,111,0,0,173,174,5,
        115,0,0,174,175,5,104,0,0,175,52,1,0,0,0,176,177,5,97,0,0,177,178,
        5,114,0,0,178,179,5,99,0,0,179,180,5,115,0,0,180,181,5,105,0,0,181,
        182,5,110,0,0,182,54,1,0,0,0,183,184,5,97,0,0,184,185,5,114,0,0,
        185,186,5,99,0,0,186,187,5,99,0,0,187,188,5,111,0,0,188,189,5,115,
        0,0,189,56,1,0,0,0,190,191,5,97,0,0,191,192,5,114,0,0,192,193,5,
        99,0,0,193,194,5,116,0,0,194,195,5,97,0,0,195,196,5,110,0,0,196,
        58,1,0,0,0,197,198,5,40,0,0,198,60,1,0,0,0,199,200,5,41,0,0,200,
        62,1,0,0,0,201,202,5,123,0,0,202,64,1,0,0,0,203,204,5,125,0,0,204,
        66,1,0,0,0,205,206,5,91,0,0,206,68,1,0,0,0,207,208,5,93,0,0,208,
        70,1,0,0,0,209,210,5,59,0,0,210,72,1,0,0,0,211,215,7,0,0,0,212,214,
        7,1,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,74,1,0,0,0,217,215,1,0,0,0,218,219,5,102,0,0,219,220,
        5,117,0,0,220,221,5,110,0,0,221,222,5,99,0,0,222,76,1,0,0,0,223,
        224,5,105,0,0,224,225,5,102,0,0,225,78,1,0,0,0,226,227,5,101,0,0,
        227,228,5,108,0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,80,1,0,
        0,0,231,232,5,112,0,0,232,233,5,114,0,0,233,234,5,105,0,0,234,235,
        5,110,0,0,235,236,5,116,0,0,236,82,1,0,0,0,237,238,5,102,0,0,238,
        239,5,111,0,0,239,240,5,114,0,0,240,84,1,0,0,0,241,243,7,2,0,0,242,
        244,9,0,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,248,1,0,0,0,245,
        247,7,2,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,
        249,1,0,0,0,249,86,1,0,0,0,250,248,1,0,0,0,251,252,5,32,0,0,252,
        88,1,0,0,0,253,254,5,10,0,0,254,90,1,0,0,0,4,0,215,243,248,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PLUS = 1
    MINUS = 2
    MULTIPLICATION = 3
    DIVISION = 4
    MOD = 5
    POWER = 6
    EQUALS = 7
    NOT_EQUALS = 8
    LESS_THAN = 9
    GREATER_THAN = 10
    LESS_THAN_EQUALS = 11
    GREATER_THAN_EQUALS = 12
    ASSIGNMENT = 13
    FACTORIAL = 14
    COMMA = 15
    EXP = 16
    ABS = 17
    CEIL = 18
    FLOOR = 19
    SIN = 20
    COS = 21
    LOG = 22
    SQRT = 23
    ROOT = 24
    SINH = 25
    COSH = 26
    ARCSIN = 27
    ARCCOS = 28
    ARCTAN = 29
    PAR_LEFT = 30
    PAR_RIGHT = 31
    BRACE_LEFT = 32
    BRACE_RIGHT = 33
    BRACKET_LEFT = 34
    BRACKET_RIGHT = 35
    SEMICOLON = 36
    VARIABLE = 37
    FUNC = 38
    IF = 39
    ELSE = 40
    PRINT = 41
    FOR = 42
    NUMBER = 43
    SPACE = 44
    NEWLINE = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'='", "'<>'", "'<'", 
            "'>'", "'<='", "'>='", "':='", "'!'", "','", "'exp'", "'abs'", 
            "'ceil'", "'floor'", "'sin'", "'cos'", "'log'", "'sqrt'", "'root'", 
            "'sinh'", "'cosh'", "'arcsin'", "'arccos'", "'arctan'", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "';'", "'func'", "'if'", 
            "'else'", "'print'", "'for'", "' '", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", "MOD", "POWER", 
            "EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUALS", 
            "GREATER_THAN_EQUALS", "ASSIGNMENT", "FACTORIAL", "COMMA", "EXP", 
            "ABS", "CEIL", "FLOOR", "SIN", "COS", "LOG", "SQRT", "ROOT", 
            "SINH", "COSH", "ARCSIN", "ARCCOS", "ARCTAN", "PAR_LEFT", "PAR_RIGHT", 
            "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
            "SEMICOLON", "VARIABLE", "FUNC", "IF", "ELSE", "PRINT", "FOR", 
            "NUMBER", "SPACE", "NEWLINE" ]

    ruleNames = [ "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", "MOD", 
                  "POWER", "EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", 
                  "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "ASSIGNMENT", 
                  "FACTORIAL", "COMMA", "EXP", "ABS", "CEIL", "FLOOR", "SIN", 
                  "COS", "LOG", "SQRT", "ROOT", "SINH", "COSH", "ARCSIN", 
                  "ARCCOS", "ARCTAN", "PAR_LEFT", "PAR_RIGHT", "BRACE_LEFT", 
                  "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", "SEMICOLON", 
                  "VARIABLE", "FUNC", "IF", "ELSE", "PRINT", "FOR", "NUMBER", 
                  "SPACE", "NEWLINE" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


